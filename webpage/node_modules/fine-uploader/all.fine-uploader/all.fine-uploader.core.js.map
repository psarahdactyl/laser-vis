{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/traditional/traditional.form.upload.handler.js","../client/js/traditional/traditional.xhr.upload.handler.js","../client/js/traditional/all-chunks-done.ajax.requester.js","../client/js/third-party/crypto-js/core.js","../client/js/third-party/crypto-js/enc-base64.js","../client/js/third-party/crypto-js/hmac.js","../client/js/third-party/crypto-js/sha1.js","../client/js/third-party/crypto-js/sha256.js","../client/js/third-party/crypto-js/lib-typedarrays.js","../client/js/s3/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/s3/uploader.basic.js","../client/js/s3/request-signer.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/s3/multipart.initiate.ajax.requester.js","../client/js/s3/multipart.complete.ajax.requester.js","../client/js/s3/multipart.abort.ajax.requester.js","../client/js/s3/s3.xhr.upload.handler.js","../client/js/s3/s3.form.upload.handler.js","../client/js/azure/util.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome21OrHigher","match","isChrome14OrHigher","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","file","normalizeData","fileContainer","_prepareItemsForUpload","cancel","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","uploadData","_uploadData","enabled","getName","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","debug","pauseUpload","removeFileRef","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkSuccess","_onUploadChunkSuccess","onResume","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","enableAuto","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","filenameParam","forceMultipart","paramsInBody","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partIndex","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","recordsExpireIn","resuming","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","isResumable","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","_getLocalStorageId","formatVersion","_getMimeType","_getPersistableData","ceil","_markNotResumable","localStorageId","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","record","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","getIframeContentJson","doc","innerHtml","contentWindow","nodeValue","createForm","responseFromMessage","multipart","addChunkingSpecificParams","allChunksDoneRequester","AllChunksDoneAjaxRequester","createReadyStateChangedHandler","onUploadOrChunkComplete","getChunksCompleteParams","isErrorUploadResponse","parseResponse","sendChunksCompleteRequest","complete","setParamsAndGetEntityToSend","setUploadHeaders","extraHeaders","toSend","promises","endpointHandler","CryptoJS","C","C_lib","lib","Base","F","overrides","subtype","mixIn","init","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","nBytes","C_enc","enc","hexChars","bite","hexStr","hexStrLength","Latin1","latin1Chars","fromCharCode","latin1Str","latin1StrLength","Utf8","decodeURIComponent","escape","utf8Str","unescape","BufferedBlockAlgorithm","_data","_nDataBytes","_append","_process","doFlush","dataWords","dataSigBytes","blockSize","blockSizeBytes","nBlocksReady","_minBufferSize","nWordsReady","nBytesReady","min","_doProcessBlock","processedWords","Hasher","cfg","_doReset","update","messageUpdate","hash","_doFinalize","_createHelper","hasher","_createHmacHelper","C_algo","HMAC","algo","Base64","map","_map","base64Chars","byte1","byte2","byte3","triplet","j","paddingChar","base64Str","base64StrLength","paddingIndex","bits1","bits2","_hasher","hasherBlockSize","hasherBlockSizeBytes","oKey","_oKey","iKey","_iKey","oKeyWords","iKeyWords","innerHash","hmac","W","SHA1","_hash","M","H","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1","K","isPrime","sqrtN","factor","getFractionalBits","nPrime","SHA256","f","g","h","gamma0x","gamma0","gamma1x","gamma1","ch","maj","sigma0","sigma1","t1","t2","HmacSHA256","superInit","subInit","typedArray","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","byteOffset","byteLength","typedArrayByteLength","s3","util","ALGORITHM_PARAM_NAME","AWS_PARAM_PREFIX","CREDENTIAL_PARAM_NAME","DATE_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_NAME","REDUCED_REDUNDANCY_PARAM_VALUE","SERVER_SIDE_ENCRYPTION_PARAM_NAME","SERVER_SIDE_ENCRYPTION_PARAM_VALUE","SESSION_TOKEN_PARAM_NAME","V4_ALGORITHM_PARAM_VALUE","V4_SIGNATURE_PARAM_NAME","CASE_SENSITIVE_PARAM_NAMES","UNSIGNABLE_REST_HEADER_NAMES","UNPREFIXED_PARAM_NAMES","getBucket","patterns","bucket","pattern","_getPrefixedParamName","getPolicy","policy","conditions","date","drift","clockDrift","accessKey","acl","expectedStatus","sessionToken","successRedirectUrl","getSuccessRedirectAbsoluteUrl","minFileSize","maxFileSize","reducedRedundancy","region","serverSideEncryption","signatureVersion","expiration","getPolicyExpirationDate","Content-Type","success_action_status","success_action_redirect","getV4CredentialsString","getV4PolicyDate","awsParamName","enforceSizeLimits","refreshPolicyCredentials","newSessionToken","sessionTokenFound","oldCondIdx","oldCondObj","oldCondName","oldCondVal","generateAwsParams","signPolicyCallback","awsParams","customParams","policyJson","AWSAccessKeyId","policyAndSignature","updatedAccessKey","updatedSessionToken","signature","minSize","adjustedMinSize","adjustedMaxSize","adjustedDate","getPolicyDate","getCredentialsDate","getUTCFullYear","getUTCMonth","getUTCDate","_minutesToAdd_","minutesToAdd","pad","setMinutes","getMinutes","toISOString","number","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parseIframeResponse","queryString","search","etag","targetAnchorContainer","encodeQueryStringParam","percentEncoded","uriEscape","uriEscapePath","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","objectProperties","host","credentials","secretKey","iframeSupport","localBlankPagePath","onCredentialsExpired","setCredentials","_currentCredentials","_aclStore","_cannedKeys","_cannedBuckets","_buckets","_hosts","getKey","ignoreEmpty","setAcl","aclStore","_determineBucket","getHost","_determineHost","getKeyName","_determineKeyName","maxSizeLimit","oldParams","modifiedParams","paramName","credentialsProvider","onExpired","updateCredentials","_determineObjectPropertyValue","property","maybe","keynameLogic","onGetKeynameFailure","onGetKeynameSuccess","keyname","keynameToUse","_handleKeynameFunction","keynameFunc","successCallback","failureCallback","getResponseHeader","s3Key","s3Bucket","RequestSigner","thisSignatureRequester","pendingSignatures","expectingPolicy","signatureSpec","generateHeaders","signatureConstructor","getHeaders","Authorization","getRequestDate","getSignedHeaders","getEndOfUrl","v2","getStringToSign","contentMd5","headersStr","endOfUrl","signApiRequest","signatureEffort","headersWordArray","headersHmacSha1","headersHmacSha1Base64","signPolicy","policyStr","policyWordArray","base64Policy","policyHmacSha1","policyHmacSha1Base64","v4","getCanonicalQueryString","endOfUri","queryParamIdx","canonicalQueryString","encodedQueryParams","encodedQueryParamNames","queryStrings","nameAndVal","paramVal","forEach","encodedQueryParamName","getCanonicalRequest","getCanonicalUri","headerNames","hashedContent","getEncodedHashedPayload","onloadend","DONE","getScope","canonicalRequest","hashedRequest","scope","stringToSignTemplate","hashed","raw","signedHeaders","headerName","headersPattern","matches","dateKey","dateRegionKey","dateRegionServiceKey","signingKey","credentialPattern","credentialCondition","credential","condition","handleSignatureReceived","responseJson","pendingSignatureData","invalid","getStringToSignArtifacts","requestInfo","toSign","generateStringToSign","headerIndexesToRemove","headerIdx","toSignRaw","REQUEST_TYPE","MULTIPART_ABORT","uploadId","MULTIPART_INITIATE","MULTIPART_COMPLETE","MULTIPART_UPLOAD","partNum","content","Host","determineSignatureClientSide","toBeSigned","updatedHeaders","getToSign","signatureArtifacts","stringToSign","getSignature","queryParams","stringToSignRaw","constructStringToSign","artifacts","theHeaders","withUploadId","theUploadId","withContent","theContent","withContentType","theContentType","withPartNum","thePartNum","toUTCString","_artifacts_","pendingRequests","handleSuccessResponse","successIndicator","failureIndicator","parsedResponse","InitiateMultipartAjaxRequester","pendingInitiateRequests","getContentType","getSignatureAjaxRequester","handleInitiateRequestComplete","domParser","DOMParser","responseDoc","parseFromString","uploadIdElements","messageElements","CompleteMultipartAjaxRequester","pendingCompleteRequests","handleCompleteRequestComplete","bucketEls","keyEls","getCompleteRequestBody","etagEntries","implementation","createDocument","etagEntry","partEl","partNumEl","partNumTextEl","createTextNode","etagTextEl","etagEl","XMLSerializer","serializeToString","AbortMultipartAjaxRequester","handleAbortRequestComplete","errorEls","awsErrorMsg","onGetBucket","onGetHost","onGetKeyName","combine","etagMap","etags","requesters","completeMultipart","initHeaders","urlSafe","restSignature","put","domain","track","hasContentType","setup","uploadIdPromise","initiateMultipart","abortMultipart","policySignature","initParams","cachedBucket","cachedHost","shouldReset","keyName","encodedKey","parsedErrorProps","parseError","awsResponseXml","parsedDoc","errorDetails","codeEls","messageEls","existedInLocalStorage","baseStorageId","bucketName","isValidResponse","responseData","handleFinishedUpload","handleUpload","azure","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","getParamsAsHeaders","parseAzureError","errorTag","codeTag","messageTag","blobProperties","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","codes","endpoints","createBlockId","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","latestEl","latestTextEl","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type"],"mappings":"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","file":"all.fine-uploader.core.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.15.6\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for Filesystem API support since webkit does not expose the DataTransfer interface\n    function isChrome21OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[2][1-9]|Chrome\\/[3-9][0-9]/) !== undefined;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    supportsFolderDrop = supportsFileDrop && isChrome21OrHigher();\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            this._handler.cancel(id);\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            return this._handler.getFile(fileOrBlobId) || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        self._options.callbacks.onUpload(id, name);\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        self._options.callbacks.onUploadChunk(id, name, chunkData);\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._onUploadChunkSuccess(id, chunkData);\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData) {\n                        return self._options.callbacks.onResume(id, name, chunkData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({uuid: uuid, name: name, size: size, batchId: batchId});\n\n            this._handler.add(id, file);\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id, name, responseJSON)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadChunkSuccess: function(id, chunkData) {\n            if (!this._preventRetries[id] && this._options.retry.enableAuto) {\n                this._autoRetries[id] = 0;\n            }\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id, name, responseJSON) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                params: {},\n                paramsInBody: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: 2000000,\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normaizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normaizedResponse.error, \"error\");\n\n                    if (normaizedResponse.reset) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normaizedResponse, xhr)) {\n                        upload.cleanup(id, normaizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                resuming = handler._getFileState(id).attemptingResume,\n                inProgressChunks = handler._getFileState(id).chunking.inProgress || [];\n\n            if (handler._getFileState(id).loaded == null) {\n                handler._getFileState(id).loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n                options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n                else {\n                    handler.uploadChunk(id, chunkIdx, resuming).then(\n                        // upload chunk success\n                        function success(response, xhr) {\n                            log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                            handler.clearCachedChunk(id, chunkIdx);\n\n                            var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                responseToReport = upload.normalizeResponse(response, true),\n                                inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                            log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                            chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                            if (inProgressChunkIdx >= 0) {\n                                inProgressChunks.splice(inProgressChunkIdx, 1);\n                            }\n\n                            handler._maybePersistChunkedState(id);\n\n                            if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                chunked.finalize(id);\n                            }\n                            else if (chunked.hasMoreParts(id)) {\n                                chunked.sendNext(id);\n                            }\n                            else {\n                                log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                            }\n                        },\n\n                        // upload chunk failure\n                        function failure(response, xhr) {\n                            chunked.handleFailure(chunkIdx, id, response, xhr);\n                        }\n                        )\n                        .done(function() {\n                            handler.clearXhr(id, chunkIdx);\n                        });\n                }\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name);\n\n            if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                chunked.sendNext(id);\n            }\n            else {\n                simple.send(id, name);\n            }\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) && !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var inProgress = optInProgress || handler._getFileState(id).chunking.inProgress,\n                remaining = optRemaining || handler._getFileState(id).chunking.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = chunking.partSize,\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/FineUploader/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = chunking.partSize,\n                endpoint = getEndpoint(id);\n\n            return qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = chunking.partSize;\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now()\n                };\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq*/\n/**\n * Upload handler used that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to\n * a generic server.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log;\n\n    /**\n     * Returns json object received by iframe from server.\n     */\n    function getIframeContentJson(id, iframe) {\n        /*jshint evil: true*/\n\n        var response, doc, innerHtml;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            log(\"converting iframe's innerHTML to JSON\");\n            log(\"innerHTML = \" + innerHtml);\n            //plain text response may be wrapped in <pre> tag\n            if (innerHtml && innerHtml.match(/^<pre/i)) {\n                innerHtml = doc.body.firstChild.firstChild.nodeValue;\n            }\n\n            response = handler._parseJsonResponse(innerHtml);\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n            response = {success: false};\n        }\n\n        return response;\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var params = options.paramsStore.get(id),\n            method = options.method.toLowerCase() === \"get\" ? \"GET\" : \"POST\",\n            endpoint = options.endpointStore.get(id),\n            name = getName(id);\n\n        params[options.uuidName] = getUuid(id);\n        params[options.filenameParam] = name;\n\n        return handler._initFormForUpload({\n            method: method,\n            endpoint: endpoint,\n            params: params,\n            paramsInBody: options.paramsInBody,\n            targetName: iframe.name\n        });\n    }\n\n    this.uploadFile = function(id) {\n        var input = handler.getInput(id),\n            iframe = handler._createIframe(id),\n            promise = new qq.Promise(),\n            form;\n\n        form = createForm(id, iframe);\n        form.appendChild(input);\n\n        handler._attachLoadEvent(iframe, function(responseFromMessage) {\n            log(\"iframe loaded\");\n\n            var response = responseFromMessage ? responseFromMessage : getIframeContentJson(id, iframe);\n\n            handler._detachLoadEvent(id);\n\n            //we can't remove an iframe if the iframe doesn't belong to the same domain\n            if (!options.cors.expected) {\n                qq(iframe).remove();\n            }\n\n            if (response.success) {\n                promise.success(response);\n            }\n            else {\n                promise.failure(response);\n            }\n        });\n\n        log(\"Sending upload request for \" + id);\n        form.submit();\n        qq(form).remove();\n\n        return promise;\n    };\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: options.cors.expected,\n            inputName: options.inputName\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n};\n","/*globals qq*/\n/**\n * Upload handler used to upload to traditional endpoints.  It depends on File API support, and, therefore,\n * makes use of `XMLHttpRequest` level 2 to upload `File`s and `Blob`s to a generic server.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.traditional = qq.traditional || {};\nqq.traditional.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        multipart = spec.forceMultipart || spec.paramsInBody,\n\n        addChunkingSpecificParams = function(id, params, chunkData) {\n            var size = getSize(id),\n                name = getName(id);\n\n            params[spec.chunking.paramNames.partIndex] = chunkData.part;\n            params[spec.chunking.paramNames.partByteOffset] = chunkData.start;\n            params[spec.chunking.paramNames.chunkSize] = chunkData.size;\n            params[spec.chunking.paramNames.totalParts] = chunkData.count;\n            params[spec.totalFileSizeName] = size;\n\n            /**\n             * When a Blob is sent in a multipart request, the filename value in the content-disposition header is either \"blob\"\n             * or an empty string.  So, we will need to include the actual file name as a param in this case.\n             */\n            if (multipart) {\n                params[spec.filenameParam] = name;\n            }\n        },\n\n        allChunksDoneRequester = new qq.traditional.AllChunksDoneAjaxRequester({\n            cors: spec.cors,\n            endpoint: spec.chunking.success.endpoint,\n            log: log\n        }),\n\n        createReadyStateChangedHandler = function(id, xhr) {\n            var promise = new qq.Promise();\n\n            xhr.onreadystatechange = function() {\n                if (xhr.readyState === 4) {\n                    var result = onUploadOrChunkComplete(id, xhr);\n\n                    if (result.success) {\n                        promise.success(result.response, xhr);\n                    }\n                    else {\n                        promise.failure(result.response, xhr);\n                    }\n                }\n            };\n\n            return promise;\n        },\n\n        getChunksCompleteParams = function(id) {\n            var params = spec.paramsStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n            params[spec.totalFileSizeName] = size;\n            params[spec.chunking.paramNames.totalParts] = handler._getTotalChunks(id);\n\n            return params;\n        },\n\n        isErrorUploadResponse = function(xhr, response) {\n            return qq.indexOf([200, 201, 202, 203, 204], xhr.status) < 0 ||\n                !response.success ||\n                response.reset;\n        },\n\n        onUploadOrChunkComplete = function(id, xhr) {\n            var response;\n\n            log(\"xhr - server response received for \" + id);\n            log(\"responseText = \" + xhr.responseText);\n\n            response = parseResponse(true, xhr);\n\n            return {\n                success: !isErrorUploadResponse(xhr, response),\n                response: response\n            };\n        },\n\n        // If this is an upload response, we require a JSON payload, otherwise, it is optional.\n        parseResponse = function(upload, xhr) {\n            var response = {};\n\n            try {\n                log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n                response = qq.parseJson(xhr.responseText);\n            }\n            catch (error) {\n                upload && log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        },\n\n        sendChunksCompleteRequest = function(id) {\n            var promise = new qq.Promise();\n\n            allChunksDoneRequester.complete(\n                    id,\n                    handler._createXhr(id),\n                    getChunksCompleteParams(id),\n                    spec.customHeaders.get(id)\n                )\n                .then(function(xhr) {\n                    promise.success(parseResponse(false, xhr), xhr);\n                }, function(xhr) {\n                    promise.failure(parseResponse(false, xhr), xhr);\n                });\n\n            return promise;\n        },\n\n        setParamsAndGetEntityToSend = function(params, xhr, fileOrBlob, id) {\n            var formData = new FormData(),\n                method = spec.method,\n                endpoint = spec.endpointStore.get(id),\n                name = getName(id),\n                size = getSize(id);\n\n            params[spec.uuidName] = getUuid(id);\n            params[spec.filenameParam] = name;\n\n            if (multipart) {\n                params[spec.totalFileSizeName] = size;\n            }\n\n            //build query string\n            if (!spec.paramsInBody) {\n                if (!multipart) {\n                    params[spec.inputName] = name;\n                }\n                endpoint = qq.obj2url(params, endpoint);\n            }\n\n            xhr.open(method, endpoint, true);\n\n            if (spec.cors.expected && spec.cors.sendCredentials) {\n                xhr.withCredentials = true;\n            }\n\n            if (multipart) {\n                if (spec.paramsInBody) {\n                    qq.obj2FormData(params, formData);\n                }\n\n                formData.append(spec.inputName, fileOrBlob);\n                return formData;\n            }\n\n            return fileOrBlob;\n        },\n\n        setUploadHeaders = function(id, xhr) {\n            var extraHeaders = spec.customHeaders.get(id),\n                fileOrBlob = handler.getFile(id);\n\n            xhr.setRequestHeader(\"Accept\", \"application/json\");\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n\n            if (!multipart) {\n                xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n                //NOTE: return mime type in xhr works on chrome 16.0.9 firefox 11.0a2\n                xhr.setRequestHeader(\"X-Mime-Type\", fileOrBlob.type);\n            }\n\n            qq.each(extraHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        };\n\n    qq.extend(this, {\n        uploadChunk: function(id, chunkIdx, resuming) {\n            var chunkData = handler._getChunkData(id, chunkIdx),\n                xhr = handler._createXhr(id, chunkIdx),\n                size = getSize(id),\n                promise, toSend, params;\n\n            promise = createReadyStateChangedHandler(id, xhr);\n            handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n            params = spec.paramsStore.get(id);\n            addChunkingSpecificParams(id, params, chunkData);\n\n            if (resuming) {\n                params[spec.resume.paramNames.resuming] = true;\n            }\n\n            toSend = setParamsAndGetEntityToSend(params, xhr, chunkData.blob, id);\n            setUploadHeaders(id, xhr);\n            xhr.send(toSend);\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var fileOrBlob = handler.getFile(id),\n                promise, xhr, params, toSend;\n\n            xhr = handler._createXhr(id);\n            handler._registerProgressHandler(id);\n            promise = createReadyStateChangedHandler(id, xhr);\n            params = spec.paramsStore.get(id);\n            toSend = setParamsAndGetEntityToSend(params, xhr, fileOrBlob, id);\n            setUploadHeaders(id, xhr);\n            xhr.send(toSend);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"traditional\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            finalizeChunks: function(id) {\n                if (spec.chunking.success.endpoint) {\n                    return sendChunksCompleteRequest(id);\n                }\n                else {\n                    return super_.finalizeChunks(id, qq.bind(parseResponse, this, true));\n                }\n            }\n        };\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send a POST to a traditional endpoint once all chunks for a specific file have uploaded\n * successfully.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.traditional.AllChunksDoneAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"POST\",\n        options = {\n            cors: {\n                allowXdr: false,\n                expected: false,\n                sendCredentials: false\n            },\n            endpoint: null,\n            log: function(str, level) {}\n        },\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return options.endpoint;\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [method],\n        method: method,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: options.cors,\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        complete: function(id, xhr, params, headers) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting All Chunks Done request for \" + id);\n\n            promises[id] = promise;\n\n            requester.initTransport(id)\n                .withParams(params)\n                .withHeaders(headers)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/**\n * CryptoJS core components.\n */\nqq.CryptoJS = (function (Math, undefined) {\n    /**\n     * CryptoJS namespace.\n     */\n    var C = {};\n\n    /**\n     * Library namespace.\n     */\n    var C_lib = C.lib = {};\n\n    /**\n     * Base object for prototypal inheritance.\n     */\n    var Base = C_lib.Base = (function () {\n        function F() {}\n\n        return {\n            /**\n             * Creates a new object that inherits from this object.\n             *\n             * @param {Object} overrides Properties to copy into the new object.\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         field: 'value',\n             *\n             *         method: function () {\n             *         }\n             *     });\n             */\n            extend: function (overrides) {\n                // Spawn\n                F.prototype = this;\n                var subtype = new F();\n\n                // Augment\n                if (overrides) {\n                    subtype.mixIn(overrides);\n                }\n\n                // Create default initializer\n                if (!subtype.hasOwnProperty('init')) {\n                    subtype.init = function () {\n                        subtype.$super.init.apply(this, arguments);\n                    };\n                }\n\n                // Initializer's prototype is the subtype object\n                subtype.init.prototype = subtype;\n\n                // Reference supertype\n                subtype.$super = this;\n\n                return subtype;\n            },\n\n            /**\n             * Extends this object and runs the init method.\n             * Arguments to create() will be passed to init().\n             *\n             * @return {Object} The new object.\n             *\n             * @static\n             *\n             * @example\n             *\n             *     var instance = MyType.create();\n             */\n            create: function () {\n                var instance = this.extend();\n                instance.init.apply(instance, arguments);\n\n                return instance;\n            },\n\n            /**\n             * Initializes a newly created object.\n             * Override this method to add some logic when your objects are created.\n             *\n             * @example\n             *\n             *     var MyType = CryptoJS.lib.Base.extend({\n             *         init: function () {\n             *             // ...\n             *         }\n             *     });\n             */\n            init: function () {\n            },\n\n            /**\n             * Copies properties into this object.\n             *\n             * @param {Object} properties The properties to mix in.\n             *\n             * @example\n             *\n             *     MyType.mixIn({\n             *         field: 'value'\n             *     });\n             */\n            mixIn: function (properties) {\n                for (var propertyName in properties) {\n                    if (properties.hasOwnProperty(propertyName)) {\n                        this[propertyName] = properties[propertyName];\n                    }\n                }\n\n                // IE won't copy toString using the loop above\n                if (properties.hasOwnProperty('toString')) {\n                    this.toString = properties.toString;\n                }\n            },\n\n            /**\n             * Creates a copy of this object.\n             *\n             * @return {Object} The clone.\n             *\n             * @example\n             *\n             *     var clone = instance.clone();\n             */\n            clone: function () {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }());\n\n    /**\n     * An array of 32-bit words.\n     *\n     * @property {Array} words The array of 32-bit words.\n     * @property {number} sigBytes The number of significant bytes in this word array.\n     */\n    var WordArray = C_lib.WordArray = Base.extend({\n        /**\n         * Initializes a newly created word array.\n         *\n         * @param {Array} words (Optional) An array of 32-bit words.\n         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.create();\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n         */\n        init: function (words, sigBytes) {\n            words = this.words = words || [];\n\n            if (sigBytes != undefined) {\n                this.sigBytes = sigBytes;\n            } else {\n                this.sigBytes = words.length * 4;\n            }\n        },\n\n        /**\n         * Converts this word array to a string.\n         *\n         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n         *\n         * @return {string} The stringified word array.\n         *\n         * @example\n         *\n         *     var string = wordArray + '';\n         *     var string = wordArray.toString();\n         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n         */\n        toString: function (encoder) {\n            return (encoder || Hex).stringify(this);\n        },\n\n        /**\n         * Concatenates a word array to this word array.\n         *\n         * @param {WordArray} wordArray The word array to append.\n         *\n         * @return {WordArray} This word array.\n         *\n         * @example\n         *\n         *     wordArray1.concat(wordArray2);\n         */\n        concat: function (wordArray) {\n            // Shortcuts\n            var thisWords = this.words;\n            var thatWords = wordArray.words;\n            var thisSigBytes = this.sigBytes;\n            var thatSigBytes = wordArray.sigBytes;\n\n            // Clamp excess bits\n            this.clamp();\n\n            // Concat\n            if (thisSigBytes % 4) {\n                // Copy one byte at a time\n                for (var i = 0; i < thatSigBytes; i++) {\n                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n                }\n            } else if (thatWords.length > 0xffff) {\n                // Copy one word at a time\n                for (var i = 0; i < thatSigBytes; i += 4) {\n                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];\n                }\n            } else {\n                // Copy all words at once\n                thisWords.push.apply(thisWords, thatWords);\n            }\n            this.sigBytes += thatSigBytes;\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Removes insignificant bits.\n         *\n         * @example\n         *\n         *     wordArray.clamp();\n         */\n        clamp: function () {\n            // Shortcuts\n            var words = this.words;\n            var sigBytes = this.sigBytes;\n\n            // Clamp\n            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n            words.length = Math.ceil(sigBytes / 4);\n        },\n\n        /**\n         * Creates a copy of this word array.\n         *\n         * @return {WordArray} The clone.\n         *\n         * @example\n         *\n         *     var clone = wordArray.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone.words = this.words.slice(0);\n\n            return clone;\n        },\n\n        /**\n         * Creates a word array filled with random bytes.\n         *\n         * @param {number} nBytes The number of random bytes to generate.\n         *\n         * @return {WordArray} The random word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n         */\n        random: function (nBytes) {\n            var words = [];\n            for (var i = 0; i < nBytes; i += 4) {\n                words.push((Math.random() * 0x100000000) | 0);\n            }\n\n            return new WordArray.init(words, nBytes);\n        }\n    });\n\n    /**\n     * Encoder namespace.\n     */\n    var C_enc = C.enc = {};\n\n    /**\n     * Hex encoding strategy.\n     */\n    var Hex = C_enc.Hex = {\n        /**\n         * Converts a word array to a hex string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The hex string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var hexChars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                hexChars.push((bite >>> 4).toString(16));\n                hexChars.push((bite & 0x0f).toString(16));\n            }\n\n            return hexChars.join('');\n        },\n\n        /**\n         * Converts a hex string to a word array.\n         *\n         * @param {string} hexStr The hex string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n         */\n        parse: function (hexStr) {\n            // Shortcut\n            var hexStrLength = hexStr.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < hexStrLength; i += 2) {\n                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n            }\n\n            return new WordArray.init(words, hexStrLength / 2);\n        }\n    };\n\n    /**\n     * Latin1 encoding strategy.\n     */\n    var Latin1 = C_enc.Latin1 = {\n        /**\n         * Converts a word array to a Latin1 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Latin1 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n\n            // Convert\n            var latin1Chars = [];\n            for (var i = 0; i < sigBytes; i++) {\n                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n                latin1Chars.push(String.fromCharCode(bite));\n            }\n\n            return latin1Chars.join('');\n        },\n\n        /**\n         * Converts a Latin1 string to a word array.\n         *\n         * @param {string} latin1Str The Latin1 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n         */\n        parse: function (latin1Str) {\n            // Shortcut\n            var latin1StrLength = latin1Str.length;\n\n            // Convert\n            var words = [];\n            for (var i = 0; i < latin1StrLength; i++) {\n                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n            }\n\n            return new WordArray.init(words, latin1StrLength);\n        }\n    };\n\n    /**\n     * UTF-8 encoding strategy.\n     */\n    var Utf8 = C_enc.Utf8 = {\n        /**\n         * Converts a word array to a UTF-8 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The UTF-8 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            try {\n                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n            } catch (e) {\n                throw new Error('Malformed UTF-8 data');\n            }\n        },\n\n        /**\n         * Converts a UTF-8 string to a word array.\n         *\n         * @param {string} utf8Str The UTF-8 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n         */\n        parse: function (utf8Str) {\n            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n        }\n    };\n\n    /**\n     * Abstract buffered block algorithm template.\n     *\n     * The property blockSize must be implemented in a concrete subtype.\n     *\n     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n     */\n    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n        /**\n         * Resets this block algorithm's data buffer to its initial state.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm.reset();\n         */\n        reset: function () {\n            // Initial values\n            this._data = new WordArray.init();\n            this._nDataBytes = 0;\n        },\n\n        /**\n         * Adds new data to this block algorithm's buffer.\n         *\n         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n         *\n         * @example\n         *\n         *     bufferedBlockAlgorithm._append('data');\n         *     bufferedBlockAlgorithm._append(wordArray);\n         */\n        _append: function (data) {\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof data == 'string') {\n                data = Utf8.parse(data);\n            }\n\n            // Append\n            this._data.concat(data);\n            this._nDataBytes += data.sigBytes;\n        },\n\n        /**\n         * Processes available data blocks.\n         *\n         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n         *\n         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n         *\n         * @return {WordArray} The processed data.\n         *\n         * @example\n         *\n         *     var processedData = bufferedBlockAlgorithm._process();\n         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n         */\n        _process: function (doFlush) {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n            var dataSigBytes = data.sigBytes;\n            var blockSize = this.blockSize;\n            var blockSizeBytes = blockSize * 4;\n\n            // Count blocks ready\n            var nBlocksReady = dataSigBytes / blockSizeBytes;\n            if (doFlush) {\n                // Round up to include partial blocks\n                nBlocksReady = Math.ceil(nBlocksReady);\n            } else {\n                // Round down to include only full blocks,\n                // less the number of blocks that must remain in the buffer\n                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n            }\n\n            // Count words ready\n            var nWordsReady = nBlocksReady * blockSize;\n\n            // Count bytes ready\n            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n            // Process blocks\n            if (nWordsReady) {\n                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n                    // Perform concrete-algorithm logic\n                    this._doProcessBlock(dataWords, offset);\n                }\n\n                // Remove processed words\n                var processedWords = dataWords.splice(0, nWordsReady);\n                data.sigBytes -= nBytesReady;\n            }\n\n            // Return processed words\n            return new WordArray.init(processedWords, nBytesReady);\n        },\n\n        /**\n         * Creates a copy of this object.\n         *\n         * @return {Object} The clone.\n         *\n         * @example\n         *\n         *     var clone = bufferedBlockAlgorithm.clone();\n         */\n        clone: function () {\n            var clone = Base.clone.call(this);\n            clone._data = this._data.clone();\n\n            return clone;\n        },\n\n        _minBufferSize: 0\n    });\n\n    /**\n     * Abstract hasher template.\n     *\n     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n     */\n    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n        /**\n         * Configuration options.\n         */\n        cfg: Base.extend(),\n\n        /**\n         * Initializes a newly created hasher.\n         *\n         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n         *\n         * @example\n         *\n         *     var hasher = CryptoJS.algo.SHA256.create();\n         */\n        init: function (cfg) {\n            // Apply config defaults\n            this.cfg = this.cfg.extend(cfg);\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this hasher to its initial state.\n         *\n         * @example\n         *\n         *     hasher.reset();\n         */\n        reset: function () {\n            // Reset data buffer\n            BufferedBlockAlgorithm.reset.call(this);\n\n            // Perform concrete-hasher logic\n            this._doReset();\n        },\n\n        /**\n         * Updates this hasher with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {Hasher} This hasher.\n         *\n         * @example\n         *\n         *     hasher.update('message');\n         *     hasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            // Append\n            this._append(messageUpdate);\n\n            // Update the hash\n            this._process();\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the hash computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The hash.\n         *\n         * @example\n         *\n         *     var hash = hasher.finalize();\n         *     var hash = hasher.finalize('message');\n         *     var hash = hasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Final message update\n            if (messageUpdate) {\n                this._append(messageUpdate);\n            }\n\n            // Perform concrete-hasher logic\n            var hash = this._doFinalize();\n\n            return hash;\n        },\n\n        blockSize: 512/32,\n\n        /**\n         * Creates a shortcut function to a hasher's object interface.\n         *\n         * @param {Hasher} hasher The hasher to create a helper for.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n         */\n        _createHelper: function (hasher) {\n            return function (message, cfg) {\n                return new hasher.init(cfg).finalize(message);\n            };\n        },\n\n        /**\n         * Creates a shortcut function to the HMAC's object interface.\n         *\n         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n         *\n         * @return {Function} The shortcut function.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n         */\n        _createHmacHelper: function (hasher) {\n            return function (message, key) {\n                return new C_algo.HMAC.init(hasher, key).finalize(message);\n            };\n        }\n    });\n\n    /**\n     * Algorithm namespace.\n     */\n    var C_algo = C.algo = {};\n\n    return C;\n}(Math));\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var C_enc = C.enc;\n\n    /**\n     * Base64 encoding strategy.\n     */\n    var Base64 = C_enc.Base64 = {\n        /**\n         * Converts a word array to a Base64 string.\n         *\n         * @param {WordArray} wordArray The word array.\n         *\n         * @return {string} The Base64 string.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n         */\n        stringify: function (wordArray) {\n            // Shortcuts\n            var words = wordArray.words;\n            var sigBytes = wordArray.sigBytes;\n            var map = this._map;\n\n            // Clamp excess bits\n            wordArray.clamp();\n\n            // Convert\n            var base64Chars = [];\n            for (var i = 0; i < sigBytes; i += 3) {\n                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n                }\n            }\n\n            // Add padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                while (base64Chars.length % 4) {\n                    base64Chars.push(paddingChar);\n                }\n            }\n\n            return base64Chars.join('');\n        },\n\n        /**\n         * Converts a Base64 string to a word array.\n         *\n         * @param {string} base64Str The Base64 string.\n         *\n         * @return {WordArray} The word array.\n         *\n         * @static\n         *\n         * @example\n         *\n         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n         */\n        parse: function (base64Str) {\n            // Shortcuts\n            var base64StrLength = base64Str.length;\n            var map = this._map;\n\n            // Ignore padding\n            var paddingChar = map.charAt(64);\n            if (paddingChar) {\n                var paddingIndex = base64Str.indexOf(paddingChar);\n                if (paddingIndex != -1) {\n                    base64StrLength = paddingIndex;\n                }\n            }\n\n            // Convert\n            var words = [];\n            var nBytes = 0;\n            for (var i = 0; i < base64StrLength; i++) {\n                if (i % 4) {\n                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);\n                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);\n                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);\n                    nBytes++;\n                }\n            }\n\n            return WordArray.create(words, nBytes);\n        },\n\n        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n    };\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var Base = C_lib.Base;\n    var C_enc = C.enc;\n    var Utf8 = C_enc.Utf8;\n    var C_algo = C.algo;\n\n    /**\n     * HMAC algorithm.\n     */\n    var HMAC = C_algo.HMAC = Base.extend({\n        /**\n         * Initializes a newly created HMAC.\n         *\n         * @param {Hasher} hasher The hash algorithm to use.\n         * @param {WordArray|string} key The secret key.\n         *\n         * @example\n         *\n         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n         */\n        init: function (hasher, key) {\n            // Init hasher\n            hasher = this._hasher = new hasher.init();\n\n            // Convert string to WordArray, else assume WordArray already\n            if (typeof key == 'string') {\n                key = Utf8.parse(key);\n            }\n\n            // Shortcuts\n            var hasherBlockSize = hasher.blockSize;\n            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n            // Allow arbitrary length keys\n            if (key.sigBytes > hasherBlockSizeBytes) {\n                key = hasher.finalize(key);\n            }\n\n            // Clamp excess bits\n            key.clamp();\n\n            // Clone key for inner and outer pads\n            var oKey = this._oKey = key.clone();\n            var iKey = this._iKey = key.clone();\n\n            // Shortcuts\n            var oKeyWords = oKey.words;\n            var iKeyWords = iKey.words;\n\n            // XOR keys with pad constants\n            for (var i = 0; i < hasherBlockSize; i++) {\n                oKeyWords[i] ^= 0x5c5c5c5c;\n                iKeyWords[i] ^= 0x36363636;\n            }\n            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n            // Set initial values\n            this.reset();\n        },\n\n        /**\n         * Resets this HMAC to its initial state.\n         *\n         * @example\n         *\n         *     hmacHasher.reset();\n         */\n        reset: function () {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Reset\n            hasher.reset();\n            hasher.update(this._iKey);\n        },\n\n        /**\n         * Updates this HMAC with a message.\n         *\n         * @param {WordArray|string} messageUpdate The message to append.\n         *\n         * @return {HMAC} This HMAC instance.\n         *\n         * @example\n         *\n         *     hmacHasher.update('message');\n         *     hmacHasher.update(wordArray);\n         */\n        update: function (messageUpdate) {\n            this._hasher.update(messageUpdate);\n\n            // Chainable\n            return this;\n        },\n\n        /**\n         * Finalizes the HMAC computation.\n         * Note that the finalize operation is effectively a destructive, read-once operation.\n         *\n         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n         *\n         * @return {WordArray} The HMAC.\n         *\n         * @example\n         *\n         *     var hmac = hmacHasher.finalize();\n         *     var hmac = hmacHasher.finalize('message');\n         *     var hmac = hmacHasher.finalize(wordArray);\n         */\n        finalize: function (messageUpdate) {\n            // Shortcut\n            var hasher = this._hasher;\n\n            // Compute HMAC\n            var innerHash = hasher.finalize(messageUpdate);\n            hasher.reset();\n            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n            return hmac;\n        }\n    });\n}());\n","/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n(function () {\n    // Shortcuts\n    var C = qq.CryptoJS;\n    var C_lib = C.lib;\n    var WordArray = C_lib.WordArray;\n    var Hasher = C_lib.Hasher;\n    var C_algo = C.algo;\n\n    // Reusable object\n    var W = [];\n\n    /**\n     * SHA-1 hash algorithm.\n     */\n    var SHA1 = C_algo.SHA1 = Hasher.extend({\n        _doReset: function () {\n            this._hash = new WordArray.init([\n                0x67452301, 0xefcdab89,\n                0x98badcfe, 0x10325476,\n                0xc3d2e1f0\n            ]);\n        },\n\n        _doProcessBlock: function (M, offset) {\n            // Shortcut\n            var H = this._hash.words;\n\n            // Working variables\n            var a = H[0];\n            var b = H[1];\n            var c = H[2];\n            var d = H[3];\n            var e = H[4];\n\n            // Computation\n            for (var i = 0; i < 80; i++) {\n                if (i < 16) {\n                    W[i] = M[offset + i] | 0;\n                } else {\n                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n                    W[i] = (n << 1) | (n >>> 31);\n                }\n\n                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n                if (i < 20) {\n                    t += ((b & c) | (~b & d)) + 0x5a827999;\n                } else if (i < 40) {\n                    t += (b ^ c ^ d) + 0x6ed9eba1;\n                } else if (i < 60) {\n                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n                } else /* if (i < 80) */ {\n                    t += (b ^ c ^ d) - 0x359d3e2a;\n                }\n\n                e = d;\n                d = c;\n                c = (b << 30) | (b >>> 2);\n                b = a;\n                a = t;\n            }\n\n            // Intermediate hash value\n            H[0] = (H[0] + a) | 0;\n            H[1] = (H[1] + b) | 0;\n            H[2] = (H[2] + c) | 0;\n            H[3] = (H[3] + d) | 0;\n            H[4] = (H[4] + e) | 0;\n        },\n\n        _doFinalize: function () {\n            // Shortcuts\n            var data = this._data;\n            var dataWords = data.words;\n\n            var nBitsTotal = this._nDataBytes * 8;\n            var nBitsLeft = data.sigBytes * 8;\n\n            // Add padding\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n            data.sigBytes = dataWords.length * 4;\n\n            // Hash final blocks\n            this._process();\n\n            // Return final computed hash\n            return this._hash;\n        },\n\n        clone: function () {\n            var clone = Hasher.clone.call(this);\n            clone._hash = this._hash.clone();\n\n            return clone;\n        }\n    });\n\n    /**\n     * Shortcut function to the hasher's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     *\n     * @return {WordArray} The hash.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hash = CryptoJS.SHA1('message');\n     *     var hash = CryptoJS.SHA1(wordArray);\n     */\n    C.SHA1 = Hasher._createHelper(SHA1);\n\n    /**\n     * Shortcut function to the HMAC's object interface.\n     *\n     * @param {WordArray|string} message The message to hash.\n     * @param {WordArray|string} key The secret key.\n     *\n     * @return {WordArray} The HMAC.\n     *\n     * @static\n     *\n     * @example\n     *\n     *     var hmac = CryptoJS.HmacSHA1(message, key);\n     */\n    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n}());\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function (Math) {\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n    var Hasher = C_lib.Hasher;\r\n    var C_algo = C.algo;\r\n\r\n    // Initialization and round constants tables\r\n    var H = [];\r\n    var K = [];\r\n\r\n    // Compute constants\r\n    (function () {\r\n        function isPrime(n) {\r\n            var sqrtN = Math.sqrt(n);\r\n            for (var factor = 2; factor <= sqrtN; factor++) {\r\n                if (!(n % factor)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function getFractionalBits(n) {\r\n            return ((n - (n | 0)) * 0x100000000) | 0;\r\n        }\r\n\r\n        var n = 2;\r\n        var nPrime = 0;\r\n        while (nPrime < 64) {\r\n            if (isPrime(n)) {\r\n                if (nPrime < 8) {\r\n                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\r\n                }\r\n                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\r\n\r\n                nPrime++;\r\n            }\r\n\r\n            n++;\r\n        }\r\n    }());\r\n\r\n    // Reusable object\r\n    var W = [];\r\n\r\n    /**\r\n     * SHA-256 hash algorithm.\r\n     */\r\n    var SHA256 = C_algo.SHA256 = Hasher.extend({\r\n        _doReset: function () {\r\n            this._hash = new WordArray.init(H.slice(0));\r\n        },\r\n\r\n        _doProcessBlock: function (M, offset) {\r\n            // Shortcut\r\n            var H = this._hash.words;\r\n\r\n            // Working variables\r\n            var a = H[0];\r\n            var b = H[1];\r\n            var c = H[2];\r\n            var d = H[3];\r\n            var e = H[4];\r\n            var f = H[5];\r\n            var g = H[6];\r\n            var h = H[7];\r\n\r\n            // Computation\r\n            for (var i = 0; i < 64; i++) {\r\n                if (i < 16) {\r\n                    W[i] = M[offset + i] | 0;\r\n                } else {\r\n                    var gamma0x = W[i - 15];\r\n                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\r\n                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\r\n                                   (gamma0x >>> 3);\r\n\r\n                    var gamma1x = W[i - 2];\r\n                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\r\n                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\r\n                                   (gamma1x >>> 10);\r\n\r\n                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\r\n                }\r\n\r\n                var ch  = (e & f) ^ (~e & g);\r\n                var maj = (a & b) ^ (a & c) ^ (b & c);\r\n\r\n                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\r\n                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\r\n\r\n                var t1 = h + sigma1 + ch + K[i] + W[i];\r\n                var t2 = sigma0 + maj;\r\n\r\n                h = g;\r\n                g = f;\r\n                f = e;\r\n                e = (d + t1) | 0;\r\n                d = c;\r\n                c = b;\r\n                b = a;\r\n                a = (t1 + t2) | 0;\r\n            }\r\n\r\n            // Intermediate hash value\r\n            H[0] = (H[0] + a) | 0;\r\n            H[1] = (H[1] + b) | 0;\r\n            H[2] = (H[2] + c) | 0;\r\n            H[3] = (H[3] + d) | 0;\r\n            H[4] = (H[4] + e) | 0;\r\n            H[5] = (H[5] + f) | 0;\r\n            H[6] = (H[6] + g) | 0;\r\n            H[7] = (H[7] + h) | 0;\r\n        },\r\n\r\n        _doFinalize: function () {\r\n            // Shortcuts\r\n            var data = this._data;\r\n            var dataWords = data.words;\r\n\r\n            var nBitsTotal = this._nDataBytes * 8;\r\n            var nBitsLeft = data.sigBytes * 8;\r\n\r\n            // Add padding\r\n            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\r\n            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\r\n            data.sigBytes = dataWords.length * 4;\r\n\r\n            // Hash final blocks\r\n            this._process();\r\n\r\n            // Return final computed hash\r\n            return this._hash;\r\n        },\r\n\r\n        clone: function () {\r\n            var clone = Hasher.clone.call(this);\r\n            clone._hash = this._hash.clone();\r\n\r\n            return clone;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Shortcut function to the hasher's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     *\r\n     * @return {WordArray} The hash.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hash = CryptoJS.SHA256('message');\r\n     *     var hash = CryptoJS.SHA256(wordArray);\r\n     */\r\n    C.SHA256 = Hasher._createHelper(SHA256);\r\n\r\n    /**\r\n     * Shortcut function to the HMAC's object interface.\r\n     *\r\n     * @param {WordArray|string} message The message to hash.\r\n     * @param {WordArray|string} key The secret key.\r\n     *\r\n     * @return {WordArray} The HMAC.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var hmac = CryptoJS.HmacSHA256(message, key);\r\n     */\r\n    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\r\n}(Math));\r\n","/*\r\nCryptoJS v3.1.2\r\ncode.google.com/p/crypto-js\r\n(c) 2009-2013 by Jeff Mott. All rights reserved.\r\ncode.google.com/p/crypto-js/wiki/License\r\n*/\r\n(function () {\r\n    // Check if typed arrays are supported\r\n    if (typeof ArrayBuffer != 'function') {\r\n        return;\r\n    }\r\n\r\n    // Shortcuts\r\n    var C = qq.CryptoJS;\r\n    var C_lib = C.lib;\r\n    var WordArray = C_lib.WordArray;\r\n\r\n    // Reference original init\r\n    var superInit = WordArray.init;\r\n\r\n    // Augment WordArray.init to handle typed arrays\r\n    var subInit = WordArray.init = function (typedArray) {\r\n        // Convert buffers to uint8\r\n        if (typedArray instanceof ArrayBuffer) {\r\n            typedArray = new Uint8Array(typedArray);\r\n        }\r\n\r\n        // Convert other array views to uint8\r\n        if (\r\n            typedArray instanceof Int8Array ||\r\n            typedArray instanceof Uint8ClampedArray ||\r\n            typedArray instanceof Int16Array ||\r\n            typedArray instanceof Uint16Array ||\r\n            typedArray instanceof Int32Array ||\r\n            typedArray instanceof Uint32Array ||\r\n            typedArray instanceof Float32Array ||\r\n            typedArray instanceof Float64Array\r\n        ) {\r\n            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\r\n        }\r\n\r\n        // Handle Uint8Array\r\n        if (typedArray instanceof Uint8Array) {\r\n            // Shortcut\r\n            var typedArrayByteLength = typedArray.byteLength;\r\n\r\n            // Extract bytes\r\n            var words = [];\r\n            for (var i = 0; i < typedArrayByteLength; i++) {\r\n                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\r\n            }\r\n\r\n            // Initialize this word array\r\n            superInit.call(this, words, typedArrayByteLength);\r\n        } else {\r\n            // Else call normal init\r\n            superInit.apply(this, arguments);\r\n        }\r\n    };\r\n\r\n    subInit.prototype = WordArray;\r\n}());\r\n","/*globals qq */\nqq.s3 = qq.s3 || {};\n\nqq.s3.util = qq.s3.util || (function() {\n    \"use strict\";\n\n    return {\n        ALGORITHM_PARAM_NAME: \"x-amz-algorithm\",\n\n        AWS_PARAM_PREFIX: \"x-amz-meta-\",\n\n        CREDENTIAL_PARAM_NAME: \"x-amz-credential\",\n\n        DATE_PARAM_NAME: \"x-amz-date\",\n\n        REDUCED_REDUNDANCY_PARAM_NAME: \"x-amz-storage-class\",\n        REDUCED_REDUNDANCY_PARAM_VALUE: \"REDUCED_REDUNDANCY\",\n\n        SERVER_SIDE_ENCRYPTION_PARAM_NAME: \"x-amz-server-side-encryption\",\n        SERVER_SIDE_ENCRYPTION_PARAM_VALUE: \"AES256\",\n\n        SESSION_TOKEN_PARAM_NAME: \"x-amz-security-token\",\n\n        V4_ALGORITHM_PARAM_VALUE: \"AWS4-HMAC-SHA256\",\n\n        V4_SIGNATURE_PARAM_NAME: \"x-amz-signature\",\n\n        CASE_SENSITIVE_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNSIGNABLE_REST_HEADER_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\"\n        ],\n\n        UNPREFIXED_PARAM_NAMES: [\n            \"Cache-Control\",\n            \"Content-Disposition\",\n            \"Content-Encoding\",\n            \"Content-MD5\",\n            \"x-amz-server-side-encryption\",\n            \"x-amz-server-side-encryption-aws-kms-key-id\",\n            \"x-amz-server-side-encryption-customer-algorithm\",\n            \"x-amz-server-side-encryption-customer-key\",\n            \"x-amz-server-side-encryption-customer-key-MD5\"\n        ],\n\n        /**\n         * This allows for the region to be specified in the bucket's endpoint URL, or not.\n         *\n         * Examples of some valid endpoints are:\n         *     http://foo.s3.amazonaws.com\n         *     https://foo.s3.amazonaws.com\n         *     http://foo.s3-ap-northeast-1.amazonaws.com\n         *     foo.s3.amazonaws.com\n         *     http://foo.bar.com\n         *     http://s3.amazonaws.com/foo.bar.com\n         * ...etc\n         *\n         * @param endpoint The bucket's URL.\n         * @returns {String || undefined} The bucket name, or undefined if the URL cannot be parsed.\n         */\n        getBucket: function(endpoint) {\n            var patterns = [\n                    //bucket in domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)\\.s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com/i,\n                    //bucket in path\n                    /^(?:https?:\\/\\/)?s3(?:-[a-z0-9\\-]+)?\\.amazonaws\\.com\\/([a-z0-9.\\-_]+)/i,\n                    //custom domain\n                    /^(?:https?:\\/\\/)?([a-z0-9.\\-_]+)/i\n                ],\n                bucket;\n\n            qq.each(patterns, function(idx, pattern) {\n                var match = pattern.exec(endpoint);\n\n                if (match) {\n                    bucket = match[1];\n                    return false;\n                }\n            });\n\n            return bucket;\n        },\n\n        /** Create Prefixed request headers which are appropriate for S3.\n         *\n         * If the request header is appropriate for S3 (e.g. Cache-Control) then pass\n         * it along without a metadata prefix. For all other request header parameter names,\n         * apply qq.s3.util.AWS_PARAM_PREFIX before the name.\n         * See: http://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectPUT.html\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                return name;\n            }\n            return qq.s3.util.AWS_PARAM_PREFIX + name;\n        },\n\n        /**\n         * Create a policy document to be signed and sent along with the S3 upload request.\n         *\n         * @param spec Object with properties use to construct the policy document.\n         * @returns {Object} Policy doc.\n         */\n        getPolicy: function(spec) {\n            var policy = {},\n                conditions = [],\n                bucket = spec.bucket,\n                date = spec.date,\n                drift = spec.clockDrift,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                type = spec.type,\n                expectedStatus = spec.expectedStatus,\n                sessionToken = spec.sessionToken,\n                params = spec.params,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                minFileSize = spec.minFileSize,\n                maxFileSize = spec.maxFileSize,\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion;\n\n            policy.expiration = qq.s3.util.getPolicyExpirationDate(date, drift);\n\n            conditions.push({acl: acl});\n            conditions.push({bucket: bucket});\n\n            if (type) {\n                conditions.push({\"Content-Type\": type});\n            }\n\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                conditions.push({success_action_status: expectedStatus.toString()});\n            }\n\n            if (successRedirectUrl) {\n                conditions.push({success_action_redirect: successRedirectUrl});\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            if (serverSideEncryption) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (signatureVersion === 2) {\n                conditions.push({key: key});\n            }\n            else if (signatureVersion === 4) {\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n\n                conditions.push({});\n                conditions[conditions.length - 1].key = key;\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.CREDENTIAL_PARAM_NAME] =\n                    qq.s3.util.getV4CredentialsString({date: date, key: accessKey, region: region});\n\n                conditions.push({});\n                conditions[conditions.length - 1][qq.s3.util.DATE_PARAM_NAME] =\n                    qq.s3.util.getV4PolicyDate(date, drift);\n            }\n\n            // user metadata\n            qq.each(params, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name),\n                    param = {};\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    param[awsParamName] = val;\n                }\n                else {\n                    param[awsParamName] = encodeURIComponent(val);\n                }\n\n                conditions.push(param);\n            });\n\n            policy.conditions = conditions;\n\n            qq.s3.util.enforceSizeLimits(policy, minFileSize, maxFileSize);\n\n            return policy;\n        },\n\n        /**\n         * Update a previously constructed policy document with updated credentials.  Currently, this only requires we\n         * update the session token.  This is only relevant if requests are being signed client-side.\n         *\n         * @param policy Live policy document\n         * @param newSessionToken Updated session token.\n         */\n        refreshPolicyCredentials: function(policy, newSessionToken) {\n            var sessionTokenFound = false;\n\n            qq.each(policy.conditions, function(oldCondIdx, oldCondObj) {\n                qq.each(oldCondObj, function(oldCondName, oldCondVal) {\n                    if (oldCondName === qq.s3.util.SESSION_TOKEN_PARAM_NAME) {\n                        oldCondObj[oldCondName] = newSessionToken;\n                        sessionTokenFound = true;\n                    }\n                });\n            });\n\n            if (!sessionTokenFound) {\n                policy.conditions.push({});\n                policy.conditions[policy.conditions.length - 1][qq.s3.util.SESSION_TOKEN_PARAM_NAME] = newSessionToken;\n            }\n        },\n\n        /**\n         * Generates all parameters to be passed along with the S3 upload request.  This includes invoking a callback\n         * that is expected to asynchronously retrieve a signature for the policy document.  Note that the server\n         * signing the request should reject a \"tainted\" policy document that includes unexpected values, since it is\n         * still possible for a malicious user to tamper with these values during policy document generation,\n         * before it is sent to the server for signing.\n         *\n         * @param spec Object with properties: `params`, `type`, `key`, `accessKey`, `acl`, `expectedStatus`, `successRedirectUrl`,\n         * `reducedRedundancy`, `region`, `serverSideEncryption`, `version`, and `log()`, along with any options associated with `qq.s3.util.getPolicy()`.\n         * @returns {qq.Promise} Promise that will be fulfilled once all parameters have been determined.\n         */\n        generateAwsParams: function(spec, signPolicyCallback) {\n            var awsParams = {},\n                customParams = spec.params,\n                promise = new qq.Promise(),\n                sessionToken = spec.sessionToken,\n                drift = spec.clockDrift,\n                type = spec.type,\n                key = spec.key,\n                accessKey = spec.accessKey,\n                acl = spec.acl,\n                expectedStatus = spec.expectedStatus,\n                successRedirectUrl = qq.s3.util.getSuccessRedirectAbsoluteUrl(spec.successRedirectUrl),\n                reducedRedundancy = spec.reducedRedundancy,\n                region = spec.region,\n                serverSideEncryption = spec.serverSideEncryption,\n                signatureVersion = spec.signatureVersion,\n                now = new Date(),\n                log = spec.log,\n                policyJson;\n\n            spec.date = now;\n            policyJson = qq.s3.util.getPolicy(spec);\n\n            awsParams.key = key;\n\n            if (type) {\n                awsParams[\"Content-Type\"] = type;\n            }\n            // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n            if (expectedStatus) {\n                awsParams.success_action_status = expectedStatus;\n            }\n\n            if (successRedirectUrl) {\n                awsParams.success_action_redirect = successRedirectUrl;\n            }\n            // jscs:enable\n            if (reducedRedundancy) {\n                awsParams[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n            }\n\n            if (serverSideEncryption) {\n                awsParams[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n            }\n\n            if (sessionToken) {\n                awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n            }\n\n            awsParams.acl = acl;\n\n            // Custom (user-supplied) params must be prefixed with the value of `qq.s3.util.AWS_PARAM_PREFIX`.\n            // Params such as Cache-Control or Content-Disposition will not be prefixed.\n            // Prefixed param values will be URI encoded as well.\n            qq.each(customParams, function(name, val) {\n                var awsParamName = qq.s3.util._getPrefixedParamName(name);\n\n                if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, awsParamName) >= 0) {\n                    awsParams[awsParamName] = val;\n                }\n                else {\n                    awsParams[awsParamName] = encodeURIComponent(val);\n                }\n            });\n\n            if (signatureVersion === 2) {\n                awsParams.AWSAccessKeyId = accessKey;\n            }\n            else if (signatureVersion === 4) {\n                awsParams[qq.s3.util.ALGORITHM_PARAM_NAME] = qq.s3.util.V4_ALGORITHM_PARAM_VALUE;\n                awsParams[qq.s3.util.CREDENTIAL_PARAM_NAME] = qq.s3.util.getV4CredentialsString({date: now, key: accessKey, region: region});\n                awsParams[qq.s3.util.DATE_PARAM_NAME] = qq.s3.util.getV4PolicyDate(now, drift);\n            }\n\n            // Invoke a promissory callback that should provide us with a base64-encoded policy doc and an\n            // HMAC signature for the policy doc.\n            signPolicyCallback(policyJson).then(\n                function(policyAndSignature, updatedAccessKey, updatedSessionToken) {\n                    awsParams.policy = policyAndSignature.policy;\n\n                    if (spec.signatureVersion === 2) {\n                        awsParams.signature = policyAndSignature.signature;\n\n                        if (updatedAccessKey) {\n                            awsParams.AWSAccessKeyId = updatedAccessKey;\n                        }\n                    }\n                    else if (spec.signatureVersion === 4) {\n                        awsParams[qq.s3.util.V4_SIGNATURE_PARAM_NAME] = policyAndSignature.signature;\n                    }\n\n                    if (updatedSessionToken) {\n                        awsParams[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                    }\n\n                    promise.success(awsParams);\n                },\n                function(errorMessage) {\n                    errorMessage = errorMessage || \"Can't continue further with request to S3 as we did not receive \" +\n                                                   \"a valid signature and policy from the server.\";\n\n                    log(\"Policy signing failed.  \" + errorMessage, \"error\");\n                    promise.failure(errorMessage);\n                }\n            );\n\n            return promise;\n        },\n\n        /**\n         * Add a condition to an existing S3 upload request policy document used to ensure AWS enforces any size\n         * restrictions placed on files server-side.  This is important to do, in case users mess with the client-side\n         * checks already in place.\n         *\n         * @param policy Policy document as an `Object`, with a `conditions` property already attached\n         * @param minSize Minimum acceptable size, in bytes\n         * @param maxSize Maximum acceptable size, in bytes (0 = unlimited)\n         */\n        enforceSizeLimits: function(policy, minSize, maxSize) {\n            var adjustedMinSize = minSize < 0 ? 0 : minSize,\n                // Adjust a maxSize of 0 to the largest possible integer, since we must specify a high and a low in the request\n                adjustedMaxSize = maxSize <= 0 ? 9007199254740992 : maxSize;\n\n            if (minSize > 0 || maxSize > 0) {\n                policy.conditions.push([\"content-length-range\", adjustedMinSize.toString(), adjustedMaxSize.toString()]);\n            }\n        },\n\n        getPolicyExpirationDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n            return qq.s3.util.getPolicyDate(adjustedDate, 5);\n        },\n\n        getCredentialsDate: function(date) {\n            return date.getUTCFullYear() + \"\" +\n                (\"0\" + (date.getUTCMonth() + 1)).slice(-2) +\n                (\"0\" + date.getUTCDate()).slice(-2);\n        },\n\n        getPolicyDate: function(date, _minutesToAdd_) {\n            var minutesToAdd = _minutesToAdd_ || 0,\n                pad, r;\n\n            /*jshint -W014 */\n            // Is this going to be a problem if we encounter this moments before 2 AM just before daylight savings time ends?\n            date.setMinutes(date.getMinutes() + (minutesToAdd || 0));\n\n            if (Date.prototype.toISOString) {\n                return date.toISOString();\n            }\n            else {\n                pad = function(number) {\n                    r = String(number);\n\n                    if (r.length === 1) {\n                        r = \"0\" + r;\n                    }\n\n                    return r;\n                };\n\n                return date.getUTCFullYear()\n                    + \"-\" + pad(date.getUTCMonth() + 1)\n                    + \"-\" + pad(date.getUTCDate())\n                    + \"T\" + pad(date.getUTCHours())\n                    + \":\" + pad(date.getUTCMinutes())\n                    + \":\" + pad(date.getUTCSeconds())\n                    + \".\" + String((date.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\n                    + \"Z\";\n            }\n        },\n\n        /**\n         * Looks at a response from S3 contained in an iframe and parses the query string in an attempt to identify\n         * the associated resource.\n         *\n         * @param iframe Iframe containing response\n         * @returns {{bucket: *, key: *, etag: *}}\n         */\n        parseIframeResponse: function(iframe) {\n            var doc = iframe.contentDocument || iframe.contentWindow.document,\n                queryString = doc.location.search,\n                match = /bucket=(.+)&key=(.+)&etag=(.+)/.exec(queryString);\n\n            if (match) {\n                return {\n                    bucket: match[1],\n                    key: match[2],\n                    etag: match[3].replace(/%22/g, \"\")\n                };\n            }\n        },\n\n        /**\n         * @param successRedirectUrl Relative or absolute location of success redirect page\n         * @returns {*|string} undefined if the parameter is undefined, otherwise the absolute location of the success redirect page\n         */\n        getSuccessRedirectAbsoluteUrl: function(successRedirectUrl) {\n            if (successRedirectUrl) {\n                var targetAnchorContainer = document.createElement(\"div\"),\n                    targetAnchor;\n\n                if (qq.ie7()) {\n                    // Note that we must make use of `innerHTML` for IE7 only instead of simply creating an anchor via\n                    // `document.createElement('a')` and setting the `href` attribute.  The latter approach does not allow us to\n                    // obtain an absolute URL in IE7 if the `endpoint` is a relative URL.\n                    targetAnchorContainer.innerHTML = \"<a href='\" + successRedirectUrl + \"'></a>\";\n                    targetAnchor = targetAnchorContainer.firstChild;\n                    return targetAnchor.href;\n                }\n                else {\n                    // IE8 and IE9 do not seem to derive an absolute URL from a relative URL using the `innerHTML`\n                    // approach above, so we'll just create an anchor this way and set it's `href` attribute.\n                    // Due to yet another quirk in IE8 and IE9, we have to set the `href` equal to itself\n                    // in order to ensure relative URLs will be properly parsed.\n                    targetAnchor = document.createElement(\"a\");\n                    targetAnchor.href = successRedirectUrl;\n                    targetAnchor.href = targetAnchor.href;\n                    return targetAnchor.href;\n                }\n            }\n        },\n\n        getV4CredentialsString: function(spec) {\n            return spec.key + \"/\" +\n                qq.s3.util.getCredentialsDate(spec.date) + \"/\" +\n                spec.region + \"/s3/aws4_request\";\n        },\n\n        getV4PolicyDate: function(date, drift) {\n            var adjustedDate = new Date(date.getTime() + drift);\n\n            return qq.s3.util.getCredentialsDate(adjustedDate) + \"T\" +\n                    (\"0\" + adjustedDate.getUTCHours()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCMinutes()).slice(-2) +\n                    (\"0\" + adjustedDate.getUTCSeconds()).slice(-2) +\n                    \"Z\";\n        },\n\n        // AWS employs a strict interpretation of [RFC 3986](http://tools.ietf.org/html/rfc3986#page-12).\n        // So, we must ensure all reserved characters listed in the spec are percent-encoded,\n        // and spaces are replaced with \"+\".\n        encodeQueryStringParam: function(param) {\n            var percentEncoded = encodeURIComponent(param);\n\n            // %-encode characters not handled by `encodeURIComponent` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/[!'()]/g, escape);\n\n            // %-encode characters not handled by `escape` (to follow RFC 3986)\n            percentEncoded = percentEncoded.replace(/\\*/g, \"%2A\");\n\n            // replace percent-encoded spaces with a \"+\"\n            return percentEncoded.replace(/%20/g, \"+\");\n        },\n        /**\n         * Escapes url part as for AWS requirements\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\n         */\n        uriEscape: function(string) {\n            var output = encodeURIComponent(string);\n            output = output.replace(/[^A-Za-z0-9_.~\\-%]+/g, escape);\n            output = output.replace(/[*]/g, function(ch) {\n                return \"%\" + ch.charCodeAt(0).toString(16).toUpperCase();\n            });\n            return output;\n        },\n        /**\n         * Escapes a path as for AWS requirement\n         * AWS uriEscapePath function pulled from aws-sdk-js licensed under Apache 2.0 - http://github.com/aws/aws-sdk-js\n         */\n        uriEscapePath: function(path) {\n            var parts = [];\n            qq.each(path.split(\"/\"), function(idx, item) {\n                parts.push(qq.s3.util.uriEscape(item));\n            });\n            return parts.join(\"/\");\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to S3, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to S3.\n * Some inherited options and API methods have a special meaning in the context of the S3 uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.s3.FineUploaderBasic = function(o) {\n        var options = {\n            request: {\n                // public key (required for server-side signing, ignored if `credentials` have been provided)\n                accessKey: null,\n\n                // padding, in milliseconds, to add to the x-amz-date header & the policy expiration date\n                clockDrift: 0\n            },\n\n            objectProperties: {\n                acl: \"private\",\n\n                // string or a function which may be promissory\n                bucket: qq.bind(function(id) {\n                    return qq.s3.util.getBucket(this.getEndpoint(id));\n                }, this),\n\n                // string or a function which may be promissory - only used for V4 multipart uploads\n                host: qq.bind(function(id) {\n                    return (/(?:http|https):\\/\\/(.+)(?:\\/.+)?/).exec(this._endpointStore.get(id))[1];\n                }, this),\n\n                // 'uuid', 'filename', or a function which may be promissory\n                key: \"uuid\",\n\n                reducedRedundancy: false,\n\n                // Defined at http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region\n                region: \"us-east-1\",\n\n                serverSideEncryption: false\n            },\n\n            credentials: {\n                // Public key (required).\n                accessKey: null,\n                // Private key (required).\n                secretKey: null,\n                // Expiration date for the credentials (required).  May be an ISO string or a `Date`.\n                expiration: null,\n                // Temporary credentials session token.\n                // Only required for temporary credentials obtained via AssumeRoleWithWebIdentity.\n                sessionToken: null\n            },\n\n            // All but `version` are ignored if `credentials` is provided.\n            signature: {\n                customHeaders: {},\n                endpoint: null,\n                version: 2\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            // required if non-File-API browsers, such as IE9 and older, are used\n            iframeSupport: {\n                localBlankPagePath: null\n            },\n\n            chunking: {\n                // minimum part size is 5 MiB when uploading to S3\n                partSize: 5242880\n            },\n\n            cors: {\n                allowXdr: true\n            },\n\n            callbacks: {\n                onCredentialsExpired: function() {}\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        if (!this.setCredentials(options.credentials, true)) {\n            this._currentCredentials.accessKey = options.request.accessKey;\n        }\n\n        this._aclStore = this._createStore(options.objectProperties.acl);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds S3 keys for file representations constructed from a session request.\n        this._cannedKeys = {};\n        // Holds S3 buckets for file representations constructed from a session request.\n        this._cannedBuckets = {};\n\n        this._buckets = {};\n        this._hosts = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.s3.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.s3.FineUploaderBasic.prototype, {\n        getBucket: function(id) {\n            if (this._cannedBuckets[id] == null) {\n                return this._buckets[id];\n            }\n            return this._cannedBuckets[id];\n        },\n\n        /**\n         * @param id File ID\n         * @returns {*} Key name associated w/ the file, if one exists\n         */\n        getKey: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedKeys[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n\n            return this._cannedKeys[id];\n        },\n\n        /**\n         * Override the parent's reset function to cleanup various S3-related items.\n         */\n        reset: function() {\n            qq.FineUploaderBasic.prototype.reset.call(this);\n            this._failedSuccessRequestCallbacks = [];\n            this._buckets = {};\n            this._hosts = {};\n        },\n\n        setCredentials: function(credentials, ignoreEmpty) {\n            if (credentials && credentials.secretKey) {\n                if (!credentials.accessKey) {\n                    throw new qq.Error(\"Invalid credentials: no accessKey\");\n                }\n                else if (!credentials.expiration) {\n                    throw new qq.Error(\"Invalid credentials: no expiration\");\n                }\n                else {\n                    this._currentCredentials = qq.extend({}, credentials);\n\n                    // Ensure expiration is a `Date`.  If initially a string, assuming it is in ISO format.\n                    if (qq.isString(credentials.expiration)) {\n                        this._currentCredentials.expiration = new Date(credentials.expiration);\n                    }\n                }\n\n                return true;\n            }\n            else if (!ignoreEmpty) {\n                throw new qq.Error(\"Invalid credentials parameter!\");\n            }\n            else {\n                this._currentCredentials = {};\n            }\n        },\n\n        setAcl: function(acl, id) {\n            this._aclStore.set(acl, id);\n        },\n\n        /**\n         * Ensures the parent's upload handler creator passes any additional S3-specific options to the handler as well\n         * as information required to instantiate the specific handler based on the current browser's capabilities.\n         *\n         * @returns {qq.UploadHandlerController}\n         * @private\n         */\n        _createUploadHandler: function() {\n            var self = this,\n                additionalOptions = {\n                    aclStore: this._aclStore,\n                    getBucket: qq.bind(this._determineBucket, this),\n                    getHost: qq.bind(this._determineHost, this),\n                    getKeyName: qq.bind(this._determineKeyName, this),\n                    iframeSupport: this._options.iframeSupport,\n                    objectProperties: this._options.objectProperties,\n                    signature: this._options.signature,\n                    clockDrift: this._options.request.clockDrift,\n                    // pass size limit validation values to include in the request so AWS enforces this server-side\n                    validation: {\n                        minSizeLimit: this._options.validation.minSizeLimit,\n                        maxSizeLimit: this._options.validation.sizeLimit\n                    }\n                };\n\n            // We assume HTTP if it is missing from the start of the endpoint string.\n            qq.override(this._endpointStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var endpoint = super_.get(id);\n\n                        if (endpoint.indexOf(\"http\") < 0) {\n                            return \"http://\" + endpoint;\n                        }\n\n                        return endpoint;\n                    }\n                };\n            });\n\n            // Some param names should be lower case to avoid signature mismatches\n            qq.override(this._paramsStore, function(super_) {\n                return {\n                    get: function(id) {\n                        var oldParams = super_.get(id),\n                            modifiedParams = {};\n\n                        qq.each(oldParams, function(name, val) {\n                            var paramName = name;\n\n                            if (qq.indexOf(qq.s3.util.CASE_SENSITIVE_PARAM_NAMES, paramName) < 0) {\n                                paramName = paramName.toLowerCase();\n                            }\n\n                            modifiedParams[paramName] = qq.isFunction(val) ? val() : val;\n                        });\n\n                        return modifiedParams;\n                    }\n                };\n            });\n\n            additionalOptions.signature.credentialsProvider = {\n                get: function() {\n                    return self._currentCredentials;\n                },\n\n                onExpired: function() {\n                    var updateCredentials = new qq.Promise(),\n                        callbackRetVal = self._options.callbacks.onCredentialsExpired();\n\n                    if (qq.isGenericPromise(callbackRetVal)) {\n                        callbackRetVal.then(function(credentials) {\n                            try {\n                                self.setCredentials(credentials);\n                                updateCredentials.success();\n                            }\n                            catch (error) {\n                                self.log(\"Invalid credentials returned from onCredentialsExpired callback! (\" + error.message + \")\", \"error\");\n                                updateCredentials.failure(\"onCredentialsExpired did not return valid credentials.\");\n                            }\n                        }, function(errorMsg) {\n                            self.log(\"onCredentialsExpired callback indicated failure! (\" + errorMsg + \")\", \"error\");\n                            updateCredentials.failure(\"onCredentialsExpired callback failed.\");\n                        });\n                    }\n                    else {\n                        self.log(\"onCredentialsExpired callback did not return a promise!\", \"error\");\n                        updateCredentials.failure(\"Unexpected return value for onCredentialsExpired.\");\n                    }\n\n                    return updateCredentials;\n                }\n            };\n\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this, additionalOptions, \"s3\");\n        },\n\n        _determineObjectPropertyValue: function(id, property) {\n            var maybe = this._options.objectProperties[property],\n                promise = new qq.Promise(),\n                self = this;\n\n            if (qq.isFunction(maybe)) {\n                maybe = maybe(id);\n                if (qq.isGenericPromise(maybe)) {\n                    promise = maybe;\n                }\n                else {\n                    promise.success(maybe);\n                }\n            }\n            else if (qq.isString(maybe)) {\n                promise.success(maybe);\n            }\n\n            promise.then(\n                function success(value) {\n                    self[\"_\" + property + \"s\"][id] = value;\n                },\n\n                function failure(errorMsg) {\n                    qq.log(\"Problem determining \" + property + \" for ID \" + id + \" (\" + errorMsg + \")\", \"error\");\n                }\n            );\n\n            return promise;\n        },\n\n        _determineBucket: function(id) {\n            return this._determineObjectPropertyValue(id, \"bucket\");\n        },\n\n        _determineHost: function(id) {\n            return this._determineObjectPropertyValue(id, \"host\");\n        },\n\n        /**\n         * Determine the file's key name and passes it to the caller via a promissory callback.  This also may\n         * delegate to an integrator-defined function that determines the file's key name on demand,\n         * which also may be promissory.\n         *\n         * @param id ID of the file\n         * @param filename Name of the file\n         * @returns {qq.Promise} A promise that will be fulfilled when the key name has been determined (and will be passed to the caller via the success callback).\n         * @private\n         */\n        _determineKeyName: function(id, filename) {\n            /*jshint -W015*/\n            var promise = new qq.Promise(),\n                keynameLogic = this._options.objectProperties.key,\n                extension = qq.getExtension(filename),\n                onGetKeynameFailure = promise.failure,\n                onGetKeynameSuccess = function(keyname, extension) {\n                    var keynameToUse = keyname;\n\n                    if (extension !== undefined) {\n                        keynameToUse += \".\" + extension;\n                    }\n\n                    promise.success(keynameToUse);\n                };\n\n            switch (keynameLogic) {\n                case \"uuid\":\n                    onGetKeynameSuccess(this.getUuid(id), extension);\n                    break;\n                case \"filename\":\n                    onGetKeynameSuccess(filename);\n                    break;\n                default:\n                    if (qq.isFunction(keynameLogic)) {\n                        this._handleKeynameFunction(keynameLogic, id, onGetKeynameSuccess, onGetKeynameFailure);\n                    }\n                    else {\n                        this.log(keynameLogic + \" is not a valid value for the s3.keyname option!\", \"error\");\n                        onGetKeynameFailure();\n                    }\n            }\n\n            return promise;\n        },\n\n        /**\n         * Called by the internal onUpload handler if the integrator has supplied a function to determine\n         * the file's key name.  The integrator's function may be promissory.  We also need to fulfill\n         * the promise contract associated with the caller as well.\n         *\n         * @param keynameFunc Integrator-supplied function that must be executed to determine the key name.  May be promissory.\n         * @param id ID of the associated file\n         * @param successCallback Invoke this if key name retrieval is successful, passing in the key name.\n         * @param failureCallback Invoke this if key name retrieval was unsuccessful.\n         * @private\n         */\n        _handleKeynameFunction: function(keynameFunc, id, successCallback, failureCallback) {\n            var self = this,\n                onSuccess = function(keyname) {\n                    successCallback(keyname);\n                },\n                onFailure = function(reason) {\n                    self.log(qq.format(\"Failed to retrieve key name for {}.  Reason: {}\", id, reason || \"null\"), \"error\");\n                    failureCallback(reason);\n                },\n                keyname = keynameFunc.call(this, id);\n\n            if (qq.isGenericPromise(keyname)) {\n                keyname.then(onSuccess, onFailure);\n            }\n            /*jshint -W116*/\n            else if (keyname == null) {\n                onFailure();\n            }\n            else {\n                onSuccess(keyname);\n            }\n        },\n\n        _getEndpointSpecificParams: function(id, response, maybeXhr) {\n            var params = {\n                key: this.getKey(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                bucket: this.getBucket(id)\n            };\n\n            if (maybeXhr && maybeXhr.getResponseHeader(\"ETag\")) {\n                params.etag = maybeXhr.getResponseHeader(\"ETag\");\n            }\n            else if (response.etag) {\n                params.etag = response.etag;\n            }\n\n            return params;\n        },\n\n        // Hooks into the base internal `_onSubmitDelete` to add key and bucket params to the delete file request.\n        _onSubmitDelete: function(id, onSuccessCallback) {\n            var additionalMandatedParams = {\n                key: this.getKey(id),\n                bucket: this.getBucket(id)\n            };\n\n            return qq.FineUploaderBasic.prototype._onSubmitDelete.call(this, id, onSuccessCallback, additionalMandatedParams);\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.s3Key == null) {\n                throw new qq.Error(\"Did not find s3Key property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedKeys[id] = sessionData.s3Key;\n                this._cannedBuckets[id] = sessionData.s3Bucket;\n            }\n\n            return id;\n        }\n    });\n}());\n","/* globals qq, CryptoJS */\n\n// IE 10 does not support Uint8ClampedArray. We don't need it, but CryptoJS attempts to reference it\n// inside a conditional via an instanceof check, which breaks S3 v4 signatures for chunked uploads.\nif (!window.Uint8ClampedArray) {\n    window.Uint8ClampedArray = function() {};\n}\n/**\n * Handles signature determination for HTML Form Upload requests and Multipart Uploader requests (via the S3 REST API).\n *\n * If the S3 requests are to be signed server side, this module will send a POST request to the server in an attempt\n * to solicit signatures for various S3-related requests.  This module also parses the response and attempts\n * to determine if the effort was successful.\n *\n * If the S3 requests are to be signed client-side, without the help of a server, this module will utilize CryptoJS to\n * sign the requests directly in the browser and send them off to S3.\n *\n * @param o Options associated with all such requests\n * @returns {{getSignature: Function}} API method used to initiate the signature request.\n * @constructor\n */\nqq.s3.RequestSigner = function(o) {\n    \"use strict\";\n\n    var requester,\n        thisSignatureRequester = this,\n        pendingSignatures = {},\n        options = {\n            expectingPolicy: false,\n            method: \"POST\",\n            signatureSpec: {\n                drift: 0,\n                credentialsProvider: {},\n                endpoint: null,\n                customHeaders: {},\n                version: 2\n            },\n            maxConnections: 3,\n            endpointStore: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        },\n        credentialsProvider,\n\n        generateHeaders = function(signatureConstructor, signature, promise) {\n            var headers = signatureConstructor.getHeaders();\n\n            if (options.signatureSpec.version === 4) {\n                headers.Authorization = qq.s3.util.V4_ALGORITHM_PARAM_VALUE +\n                    \" Credential=\" + options.signatureSpec.credentialsProvider.get().accessKey + \"/\" +\n                    qq.s3.util.getCredentialsDate(signatureConstructor.getRequestDate()) + \"/\" +\n                    options.signatureSpec.region + \"/\" +\n                    \"s3/aws4_request,\" +\n                    \"SignedHeaders=\" + signatureConstructor.getSignedHeaders() + \",\" +\n                    \"Signature=\" + signature;\n            }\n            else {\n                headers.Authorization = \"AWS \" + options.signatureSpec.credentialsProvider.get().accessKey + \":\" + signature;\n            }\n\n            promise.success(headers, signatureConstructor.getEndOfUrl());\n        },\n\n        v2 = {\n            getStringToSign: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n\\n{}/{}/{}\",\n                    signatureSpec.method,\n                    signatureSpec.contentMd5 || \"\",\n                    signatureSpec.contentType || \"\",\n                    signatureSpec.headersStr || \"\\n\",\n                    signatureSpec.bucket,\n                    signatureSpec.endOfUrl);\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var headersWordArray = qq.CryptoJS.enc.Utf8.parse(headersStr),\n                    headersHmacSha1 = qq.CryptoJS.HmacSHA1(headersWordArray, credentialsProvider.get().secretKey),\n                    headersHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(headersHmacSha1);\n\n                generateHeaders(signatureConstructor, headersHmacSha1Base64, signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    policyHmacSha1 = qq.CryptoJS.HmacSHA1(base64Policy, credentialsProvider.get().secretKey),\n                    policyHmacSha1Base64 = qq.CryptoJS.enc.Base64.stringify(policyHmacSha1);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: policyHmacSha1Base64\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        },\n\n        v4 = {\n            getCanonicalQueryString: function(endOfUri) {\n                var queryParamIdx = endOfUri.indexOf(\"?\"),\n                    canonicalQueryString = \"\",\n                    encodedQueryParams, encodedQueryParamNames, queryStrings;\n\n                if (queryParamIdx >= 0) {\n                    encodedQueryParams = {};\n                    queryStrings = endOfUri.substr(queryParamIdx + 1).split(\"&\");\n\n                    qq.each(queryStrings, function(idx, queryString) {\n                        var nameAndVal = queryString.split(\"=\"),\n                            paramVal = nameAndVal[1];\n\n                        if (paramVal == null) {\n                            paramVal = \"\";\n                        }\n\n                        encodedQueryParams[encodeURIComponent(nameAndVal[0])] = encodeURIComponent(paramVal);\n                    });\n\n                    encodedQueryParamNames = Object.keys(encodedQueryParams).sort();\n                    encodedQueryParamNames.forEach(function(encodedQueryParamName, idx) {\n                        canonicalQueryString += encodedQueryParamName + \"=\" + encodedQueryParams[encodedQueryParamName];\n                        if (idx < encodedQueryParamNames.length - 1) {\n                            canonicalQueryString += \"&\";\n                        }\n                    });\n                }\n\n                return canonicalQueryString;\n            },\n\n            getCanonicalRequest: function(signatureSpec) {\n                return qq.format(\"{}\\n{}\\n{}\\n{}\\n{}\\n{}\",\n                    signatureSpec.method,\n                    v4.getCanonicalUri(signatureSpec.endOfUrl),\n                    v4.getCanonicalQueryString(signatureSpec.endOfUrl),\n                    signatureSpec.headersStr || \"\\n\",\n                    v4.getSignedHeaders(signatureSpec.headerNames),\n                    signatureSpec.hashedContent);\n            },\n\n            getCanonicalUri: function(endOfUri) {\n                var path = endOfUri,\n                    queryParamIdx = endOfUri.indexOf(\"?\");\n\n                if (queryParamIdx > 0) {\n                    path = endOfUri.substr(0, queryParamIdx);\n                }\n                return \"/\" + path;\n            },\n\n            getEncodedHashedPayload: function(body) {\n                var promise = new qq.Promise(),\n                    reader;\n\n                if (qq.isBlob(body)) {\n                    // TODO hash blob in webworker if this becomes a notable perf issue\n                    reader = new FileReader();\n                    reader.onloadend = function(e) {\n                        if (e.target.readyState === FileReader.DONE) {\n                            if (e.target.error) {\n                                promise.failure(e.target.error);\n                            }\n                            else {\n                                var wordArray = qq.CryptoJS.lib.WordArray.create(e.target.result);\n                                promise.success(qq.CryptoJS.SHA256(wordArray).toString());\n                            }\n                        }\n                    };\n                    reader.readAsArrayBuffer(body);\n                }\n                else {\n                    body = body || \"\";\n                    promise.success(qq.CryptoJS.SHA256(body).toString());\n                }\n\n                return promise;\n            },\n\n            getScope: function(date, region) {\n                return qq.s3.util.getCredentialsDate(date) + \"/\" +\n                    region + \"/s3/aws4_request\";\n            },\n\n            getStringToSign: function(signatureSpec) {\n                var canonicalRequest = v4.getCanonicalRequest(signatureSpec),\n                    date = qq.s3.util.getV4PolicyDate(signatureSpec.date, signatureSpec.drift),\n                    hashedRequest = qq.CryptoJS.SHA256(canonicalRequest).toString(),\n                    scope = v4.getScope(signatureSpec.date, options.signatureSpec.region),\n                    stringToSignTemplate = \"AWS4-HMAC-SHA256\\n{}\\n{}\\n{}\";\n\n                return {\n                    hashed: qq.format(stringToSignTemplate, date, scope, hashedRequest),\n                    raw: qq.format(stringToSignTemplate, date, scope, canonicalRequest)\n                };\n            },\n\n            getSignedHeaders: function(headerNames) {\n                var signedHeaders = \"\";\n\n                headerNames.forEach(function(headerName, idx) {\n                    signedHeaders += headerName.toLowerCase();\n\n                    if (idx < headerNames.length - 1) {\n                        signedHeaders += \";\";\n                    }\n                });\n\n                return signedHeaders;\n            },\n\n            signApiRequest: function(signatureConstructor, headersStr, signatureEffort) {\n                var secretKey = credentialsProvider.get().secretKey,\n                    headersPattern = /.+\\n.+\\n(\\d+)\\/(.+)\\/s3\\/.+\\n(.+)/,\n                    matches = headersPattern.exec(headersStr),\n                    dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                generateHeaders(signatureConstructor, qq.CryptoJS.HmacSHA256(headersStr, signingKey), signatureEffort);\n            },\n\n            signPolicy: function(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n                var policyStr = JSON.stringify(policy),\n                    policyWordArray = qq.CryptoJS.enc.Utf8.parse(policyStr),\n                    base64Policy = qq.CryptoJS.enc.Base64.stringify(policyWordArray),\n                    secretKey = credentialsProvider.get().secretKey,\n                    credentialPattern = /.+\\/(.+)\\/(.+)\\/s3\\/aws4_request/,\n                    credentialCondition = (function() {\n                        var credential = null;\n                        qq.each(policy.conditions, function(key, condition) {\n                            var val = condition[\"x-amz-credential\"];\n                            if (val) {\n                                credential = val;\n                                return false;\n                            }\n                        });\n                        return credential;\n                    }()),\n                    matches, dateKey, dateRegionKey, dateRegionServiceKey, signingKey;\n\n                matches = credentialPattern.exec(credentialCondition);\n                dateKey = qq.CryptoJS.HmacSHA256(matches[1], \"AWS4\" + secretKey);\n                dateRegionKey = qq.CryptoJS.HmacSHA256(matches[2], dateKey);\n                dateRegionServiceKey = qq.CryptoJS.HmacSHA256(\"s3\", dateRegionKey);\n                signingKey = qq.CryptoJS.HmacSHA256(\"aws4_request\", dateRegionServiceKey);\n\n                signatureEffort.success({\n                    policy: base64Policy,\n                    signature: qq.CryptoJS.HmacSHA256(base64Policy, signingKey).toString()\n                }, updatedAccessKey, updatedSessionToken);\n            }\n        };\n\n    qq.extend(options, o, true);\n    credentialsProvider = options.signatureSpec.credentialsProvider;\n\n    function handleSignatureReceived(id, xhrOrXdr, isError) {\n        var responseJson = xhrOrXdr.responseText,\n            pendingSignatureData = pendingSignatures[id],\n            promise = pendingSignatureData.promise,\n            signatureConstructor = pendingSignatureData.signatureConstructor,\n            errorMessage, response;\n\n        delete pendingSignatures[id];\n\n        // Attempt to parse what we would expect to be a JSON response\n        if (responseJson) {\n            try {\n                response = qq.parseJson(responseJson);\n            }\n            catch (error) {\n                options.log(\"Error attempting to parse signature response: \" + error, \"error\");\n            }\n        }\n\n        // If the response is parsable and contains an `error` property, use it as the error message\n        if (response && response.error) {\n            isError = true;\n            errorMessage = response.error;\n        }\n        // If we have received a parsable response, and it has an `invalid` property,\n        // the policy document or request headers may have been tampered with client-side.\n        else if (response && response.invalid) {\n            isError = true;\n            errorMessage = \"Invalid policy document or request headers!\";\n        }\n        // Make sure the response contains policy & signature properties\n        else if (response) {\n            if (options.expectingPolicy && !response.policy) {\n                isError = true;\n                errorMessage = \"Response does not include the base64 encoded policy!\";\n            }\n            else if (!response.signature) {\n                isError = true;\n                errorMessage = \"Response does not include the signature!\";\n            }\n        }\n        // Something unknown went wrong\n        else {\n            isError = true;\n            errorMessage = \"Received an empty or invalid response from the server!\";\n        }\n\n        if (isError) {\n            if (errorMessage) {\n                options.log(errorMessage, \"error\");\n            }\n\n            promise.failure(errorMessage);\n        }\n        else if (signatureConstructor) {\n            generateHeaders(signatureConstructor, response.signature, promise);\n        }\n        else {\n            promise.success(response);\n        }\n    }\n\n    function getStringToSignArtifacts(id, version, requestInfo) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            headerNames = [],\n            headersStr = \"\",\n            now = new Date(),\n            endOfUrl, signatureSpec, toSign,\n\n            generateStringToSign = function(requestInfo) {\n                var contentMd5,\n                    headerIndexesToRemove = [];\n\n                qq.each(requestInfo.headers, function(name) {\n                    headerNames.push(name);\n                });\n                headerNames.sort();\n\n                qq.each(headerNames, function(idx, headerName) {\n                    if (qq.indexOf(qq.s3.util.UNSIGNABLE_REST_HEADER_NAMES, headerName) < 0) {\n                        headersStr += headerName.toLowerCase() + \":\" + requestInfo.headers[headerName].trim() + \"\\n\";\n                    }\n                    else if (headerName === \"Content-MD5\") {\n                        contentMd5 = requestInfo.headers[headerName];\n                    }\n                    else {\n                        headerIndexesToRemove.unshift(idx);\n                    }\n                });\n\n                qq.each(headerIndexesToRemove, function(idx, headerIdx) {\n                    headerNames.splice(headerIdx, 1);\n                });\n\n                signatureSpec = {\n                    bucket: requestInfo.bucket,\n                    contentMd5: contentMd5,\n                    contentType: requestInfo.contentType,\n                    date: now,\n                    drift: options.signatureSpec.drift,\n                    endOfUrl: endOfUrl,\n                    hashedContent: requestInfo.hashedContent,\n                    headerNames: headerNames,\n                    headersStr: headersStr,\n                    method: method\n                };\n\n                toSign = version === 2 ? v2.getStringToSign(signatureSpec) : v4.getStringToSign(signatureSpec);\n\n                return {\n                    date: now,\n                    endOfUrl: endOfUrl,\n                    signedHeaders: version === 4 ? v4.getSignedHeaders(signatureSpec.headerNames) : null,\n                    toSign: version === 4 ? toSign.hashed : toSign,\n                    toSignRaw: version === 4 ? toSign.raw : toSign\n                };\n            };\n\n        /*jshint indent:false */\n        switch (requestInfo.type) {\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_ABORT:\n                method = \"DELETE\";\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_INITIATE:\n                endOfUrl = \"uploads\";\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_COMPLETE:\n                endOfUrl = qq.format(\"uploadId={}\", requestInfo.uploadId);\n                break;\n            case thisSignatureRequester.REQUEST_TYPE.MULTIPART_UPLOAD:\n                method = \"PUT\";\n                endOfUrl = qq.format(\"partNumber={}&uploadId={}\", requestInfo.partNum, requestInfo.uploadId);\n                break;\n        }\n\n        endOfUrl = requestInfo.key + \"?\" + endOfUrl;\n\n        if (version === 4) {\n            v4.getEncodedHashedPayload(requestInfo.content).then(function(hashedContent) {\n                requestInfo.headers[\"x-amz-content-sha256\"] = hashedContent;\n                requestInfo.headers.Host = requestInfo.host;\n                requestInfo.headers[\"x-amz-date\"] = qq.s3.util.getV4PolicyDate(now, options.signatureSpec.drift);\n                requestInfo.hashedContent = hashedContent;\n\n                promise.success(generateStringToSign(requestInfo));\n            }, function (err) {\n                promise.failure(err);\n            });\n        }\n        else {\n            promise.success(generateStringToSign(requestInfo));\n        }\n\n        return promise;\n    }\n\n    function determineSignatureClientSide(id, toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        var updatedHeaders;\n\n        // REST API request\n        if (toBeSigned.signatureConstructor) {\n            if (updatedSessionToken) {\n                updatedHeaders = toBeSigned.signatureConstructor.getHeaders();\n                updatedHeaders[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = updatedSessionToken;\n                toBeSigned.signatureConstructor.withHeaders(updatedHeaders);\n            }\n\n            toBeSigned.signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                signApiRequest(toBeSigned.signatureConstructor, signatureArtifacts.stringToSign, signatureEffort);\n            }, function (err) {\n                signatureEffort.failure(err);\n            });\n        }\n        // Form upload (w/ policy document)\n        else {\n            updatedSessionToken && qq.s3.util.refreshPolicyCredentials(toBeSigned, updatedSessionToken);\n            signPolicy(toBeSigned, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken) {\n        if (options.signatureSpec.version === 4) {\n            v4.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n        else {\n            v2.signPolicy(policy, signatureEffort, updatedAccessKey, updatedSessionToken);\n        }\n    }\n\n    function signApiRequest(signatureConstructor, headersStr, signatureEffort) {\n        if (options.signatureSpec.version === 4) {\n            v4.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n        else {\n            v2.signApiRequest(signatureConstructor, headersStr, signatureEffort);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        contentType: \"application/json; charset=utf-8\",\n        endpointStore: {\n            get: function() {\n                return options.signatureSpec.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.signatureSpec.customHeaders,\n        log: options.log,\n        onComplete: handleSignatureReceived,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * On success, an object containing the parsed JSON response will be passed into the success handler if the\n         * request succeeds.  Otherwise an error message will be passed into the failure method.\n         *\n         * @param id File ID.\n         * @param toBeSigned an Object that holds the item(s) to be signed\n         * @returns {qq.Promise} A promise that is fulfilled when the response has been received.\n         */\n        getSignature: function(id, toBeSigned) {\n            var params = toBeSigned,\n                signatureConstructor = toBeSigned.signatureConstructor,\n                signatureEffort = new qq.Promise(),\n                queryParams;\n\n            if (options.signatureSpec.version === 4) {\n                queryParams = {v4: true};\n            }\n\n            if (credentialsProvider.get().secretKey && qq.CryptoJS) {\n                if (credentialsProvider.get().expiration.getTime() > Date.now()) {\n                    determineSignatureClientSide(id, toBeSigned, signatureEffort);\n                }\n                // If credentials are expired, ask for new ones before attempting to sign request\n                else {\n                    credentialsProvider.onExpired().then(function() {\n                        determineSignatureClientSide(id, toBeSigned,\n                            signatureEffort,\n                            credentialsProvider.get().accessKey,\n                            credentialsProvider.get().sessionToken);\n                    }, function(errorMsg) {\n                        options.log(\"Attempt to update expired credentials apparently failed! Unable to sign request.  \", \"error\");\n                        signatureEffort.failure(\"Unable to sign request - expired credentials.\");\n                    });\n                }\n            }\n            else {\n                options.log(\"Submitting S3 signature request for \" + id);\n\n                if (signatureConstructor) {\n                    signatureConstructor.getToSign(id).then(function(signatureArtifacts) {\n                        params = {headers: signatureArtifacts.stringToSignRaw};\n                        requester.initTransport(id)\n                            .withParams(params)\n                            .withQueryParams(queryParams)\n                            .send();\n                    }, function (err) {\n                        options.log(\"Failed to construct signature. \", \"error\");\n                        signatureEffort.failure(\"Failed to construct signature.\");\n                    });\n                }\n                else {\n                    requester.initTransport(id)\n                        .withParams(params)\n                        .withQueryParams(queryParams)\n                        .send();\n                }\n\n                pendingSignatures[id] = {\n                    promise: signatureEffort,\n                    signatureConstructor: signatureConstructor\n                };\n            }\n\n            return signatureEffort;\n        },\n\n        constructStringToSign: function(type, bucket, host, key) {\n            var headers = {},\n                uploadId, content, contentType, partNum, artifacts;\n\n            return {\n                withHeaders: function(theHeaders) {\n                    headers = theHeaders;\n                    return this;\n                },\n\n                withUploadId: function(theUploadId) {\n                    uploadId = theUploadId;\n                    return this;\n                },\n\n                withContent: function(theContent) {\n                    content = theContent;\n                    return this;\n                },\n\n                withContentType: function(theContentType) {\n                    contentType = theContentType;\n                    return this;\n                },\n\n                withPartNum: function(thePartNum) {\n                    partNum = thePartNum;\n                    return this;\n                },\n\n                getToSign: function(id) {\n                    var sessionToken = credentialsProvider.get().sessionToken,\n                        promise = new qq.Promise(),\n                        adjustedDate = new Date(Date.now() + options.signatureSpec.drift);\n\n                    headers[\"x-amz-date\"] = adjustedDate.toUTCString();\n\n                    if (sessionToken) {\n                        headers[qq.s3.util.SESSION_TOKEN_PARAM_NAME] = sessionToken;\n                    }\n\n                    getStringToSignArtifacts(id, options.signatureSpec.version, {\n                        bucket: bucket,\n                        content: content,\n                        contentType: contentType,\n                        headers: headers,\n                        host: host,\n                        key: key,\n                        partNum: partNum,\n                        type: type,\n                        uploadId: uploadId\n                    }).then(function(_artifacts_) {\n                        artifacts = _artifacts_;\n                        promise.success({\n                            headers: (function() {\n                                if (contentType) {\n                                    headers[\"Content-Type\"] = contentType;\n                                }\n\n                                delete headers.Host; // we don't want this to be set on the XHR-initiated request\n                                return headers;\n                            }()),\n                            date: artifacts.date,\n                            endOfUrl: artifacts.endOfUrl,\n                            signedHeaders: artifacts.signedHeaders,\n                            stringToSign: artifacts.toSign,\n                            stringToSignRaw: artifacts.toSignRaw\n                        });\n                    }, function (err) {\n                        promise.failure(err);\n                    });\n\n                    return promise;\n                },\n\n                getHeaders: function() {\n                    return qq.extend({}, headers);\n                },\n\n                getEndOfUrl: function() {\n                    return artifacts && artifacts.endOfUrl;\n                },\n\n                getRequestDate: function() {\n                    return artifacts && artifacts.date;\n                },\n\n                getSignedHeaders: function() {\n                    return artifacts && artifacts.signedHeaders;\n                }\n            };\n        }\n    });\n};\n\nqq.s3.RequestSigner.prototype.REQUEST_TYPE = {\n    MULTIPART_INITIATE: \"multipart_initiate\",\n    MULTIPART_COMPLETE: \"multipart_complete\",\n    MULTIPART_ABORT: \"multipart_abort\",\n    MULTIPART_UPLOAD: \"multipart_upload\"\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Initiate Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadInitiate.html)\n * request to S3 via the REST API.\n *\n * @param o Options from the caller - will override the defaults.\n * @constructor\n */\nqq.s3.InitiateMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingInitiateRequests = {},\n        options = {\n            filenameParam: \"qqfilename\",\n            method: \"POST\",\n            endpointStore: null,\n            paramsStore: null,\n            signatureSpec: null,\n            aclStore: null,\n            reducedRedundancy: false,\n            serverSideEncryption: false,\n            maxConnections: 3,\n            getContentType: function(id) {},\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            getName: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Determine all headers for the \"Initiate MPU\" request, including the \"Authorization\" header, which must be determined\n     * by the local server.  This is a promissory function.  If the server responds with a signature, the headers\n     * (including the Authorization header) will be passed into the success method of the promise.  Otherwise, the failure\n     * method on the promise will be called.\n     *\n     * @param id Associated file ID\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id) {\n        var bucket = options.getBucket(id),\n            host = options.getHost(id),\n            headers = {},\n            promise = new qq.Promise(),\n            key = options.getKey(id),\n            signatureConstructor;\n\n        headers[\"x-amz-acl\"] = options.aclStore.get(id);\n\n        if (options.reducedRedundancy) {\n            headers[qq.s3.util.REDUCED_REDUNDANCY_PARAM_NAME] = qq.s3.util.REDUCED_REDUNDANCY_PARAM_VALUE;\n        }\n\n        if (options.serverSideEncryption) {\n            headers[qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_NAME] = qq.s3.util.SERVER_SIDE_ENCRYPTION_PARAM_VALUE;\n        }\n\n        headers[qq.s3.util.AWS_PARAM_PREFIX + options.filenameParam] = encodeURIComponent(options.getName(id));\n\n        qq.each(options.paramsStore.get(id), function(name, val) {\n            if (qq.indexOf(qq.s3.util.UNPREFIXED_PARAM_NAMES, name) >= 0) {\n                headers[name] = val;\n            }\n            else {\n                headers[qq.s3.util.AWS_PARAM_PREFIX + name] = encodeURIComponent(val);\n            }\n        });\n\n        signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n            (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_INITIATE, bucket, host, key)\n            .withContentType(options.getContentType(id))\n            .withHeaders(headers);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Initiate MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleInitiateRequestComplete(id, xhr, isError) {\n        var promise = pendingInitiateRequests[id],\n            domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            uploadIdElements, messageElements, uploadId, errorMessage, status;\n\n        delete pendingInitiateRequests[id];\n\n        // The base ajax requester may declare the request to be a failure based on status code.\n        if (isError) {\n            status = xhr.status;\n\n            messageElements = responseDoc.getElementsByTagName(\"Message\");\n            if (messageElements.length > 0) {\n                errorMessage = messageElements[0].textContent;\n            }\n        }\n        // If the base ajax requester has not declared this a failure, make sure we can retrieve the uploadId from the response.\n        else {\n            uploadIdElements = responseDoc.getElementsByTagName(\"UploadId\");\n            if (uploadIdElements.length > 0) {\n                uploadId = uploadIdElements[0].textContent;\n            }\n            else {\n                errorMessage = \"Upload ID missing from request\";\n            }\n        }\n\n        // Either fail the promise (passing a descriptive error message) or declare it a success (passing the upload ID)\n        if (uploadId === undefined) {\n            if (errorMessage) {\n                options.log(qq.format(\"Specific problem detected initiating multipart upload request for {}: '{}'.\", id, errorMessage), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Unexplained error with initiate multipart upload request for {}.  Status code {}.\", id, status), \"error\");\n            }\n\n            promise.failure(\"Problem initiating upload request.\", xhr);\n        }\n        else {\n            options.log(qq.format(\"Initiate multipart upload request successful for {}.  Upload ID is {}\", id, uploadId));\n            promise.success(uploadId, xhr);\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleInitiateRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Initiate MPU\" request to AWS via the REST API.  First, though, we must get a signature from the\n         * local server for the request.  If all is successful, the uploadId from AWS will be passed into the promise's\n         * success handler. Otherwise, an error message will ultimately be passed into the failure method.\n         *\n         * @param id The ID associated with the file\n         * @returns {qq.Promise}\n         */\n        send: function(id) {\n            var promise = new qq.Promise();\n\n            getHeaders(id).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 initiate multipart upload request for \" + id);\n\n                pendingInitiateRequests[id] = promise;\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Ajax requester used to send an [\"Complete Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadComplete.html)\n * request to S3 via the REST API.\n *\n * @param o Options passed by the creator, to overwrite any default option values.\n * @constructor\n */\nqq.s3.CompleteMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingCompleteRequests = {},\n        options = {\n            method: \"POST\",\n            contentType: \"text/xml\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Complete\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId, body) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_COMPLETE, bucket, host, options.getKey(id))\n                .withUploadId(uploadId)\n                .withContent(body)\n                .withContentType(\"application/xml; charset=UTF-8\");\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Complete MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleCompleteRequestComplete(id, xhr, isError) {\n        var promise = pendingCompleteRequests[id],\n            domParser = new DOMParser(),\n            bucket = options.getBucket(id),\n            key = options.getKey(id),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            bucketEls = responseDoc.getElementsByTagName(\"Bucket\"),\n            keyEls = responseDoc.getElementsByTagName(\"Key\");\n\n        delete pendingCompleteRequests[id];\n\n        options.log(qq.format(\"Complete response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Complete Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (bucketEls.length && keyEls.length) {\n                if (bucketEls[0].textContent !== bucket) {\n                    isError = true;\n                    options.log(qq.format(\"Wrong bucket in response to Complete Multipart Upload request for {}.\", id), \"error\");\n                }\n\n                // TODO Compare key name from response w/ expected key name if AWS ever fixes the encoding of key names in this response.\n            }\n            else {\n                isError = true;\n                options.log(qq.format(\"Missing bucket and/or key in response to Complete Multipart Upload request for {}.\", id), \"error\");\n            }\n        }\n\n        if (isError) {\n            promise.failure(\"Problem combining the file parts!\", xhr);\n        }\n        else {\n            promise.success({}, xhr);\n        }\n    }\n\n    /**\n     * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n     * @returns {string} XML string containing the body to send with the \"Complete\" request\n     */\n    function getCompleteRequestBody(etagEntries) {\n        var doc = document.implementation.createDocument(null, \"CompleteMultipartUpload\", null);\n\n        // The entries MUST be sorted by part number, per the AWS API spec.\n        etagEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(etagEntries, function(idx, etagEntry) {\n            var part = etagEntry.part,\n                etag = etagEntry.etag,\n                partEl = doc.createElement(\"Part\"),\n                partNumEl = doc.createElement(\"PartNumber\"),\n                partNumTextEl = doc.createTextNode(part),\n                etagTextEl = doc.createTextNode(etag),\n                etagEl = doc.createElement(\"ETag\");\n\n            etagEl.appendChild(etagTextEl);\n            partNumEl.appendChild(partNumTextEl);\n            partEl.appendChild(partNumEl);\n            partEl.appendChild(etagEl);\n            qq(doc).children()[0].appendChild(partEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        method: options.method,\n        contentType: \"application/xml; charset=UTF-8\",\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleCompleteRequestComplete,\n        successfulResponseCodes: {\n            POST: [200]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Complete\" request and fulfills the returned promise when the success of this request is known.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         * @param etagEntries Array of objects containing `etag` values and their associated `part` numbers.\n         * @returns {qq.Promise}\n         */\n        send: function(id, uploadId, etagEntries) {\n            var promise = new qq.Promise(),\n                body = getCompleteRequestBody(etagEntries);\n\n            getHeaders(id, uploadId, body).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 complete multipart upload request for \" + id);\n\n                pendingCompleteRequests[id] = promise;\n                delete headers[\"Content-Type\"];\n\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .withPayload(body)\n                    .send();\n            }, promise.failure);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n/**\n * Ajax requester used to send an [\"Abort Multipart Upload\"](http://docs.aws.amazon.com/AmazonS3/latest/API/mpUploadAbort.html)\n * request to S3 via the REST API.\n\n * @param o\n * @constructor\n */\nqq.s3.AbortMultipartAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            endpointStore: null,\n            signatureSpec: null,\n            maxConnections: 3,\n            getBucket: function(id) {},\n            getHost: function(id) {},\n            getKey: function(id) {},\n            log: function(str, level) {}\n        },\n        getSignatureAjaxRequester;\n\n    qq.extend(options, o);\n\n    // Transport for requesting signatures (for the \"Complete\" requests) from the local server\n    getSignatureAjaxRequester = new qq.s3.RequestSigner({\n        endpointStore: options.endpointStore,\n        signatureSpec: options.signatureSpec,\n        cors: options.cors,\n        log: options.log\n    });\n\n    /**\n     * Attach all required headers (including Authorization) to the \"Abort\" request.  This is a promissory function\n     * that will fulfill the associated promise once all headers have been attached or when an error has occurred that\n     * prevents headers from being attached.\n     *\n     * @param id Associated file ID\n     * @param uploadId ID of the associated upload, according to AWS\n     * @returns {qq.Promise}\n     */\n    function getHeaders(id, uploadId) {\n        var headers = {},\n            promise = new qq.Promise(),\n            bucket = options.getBucket(id),\n            host = options.getHost(id),\n            signatureConstructor = getSignatureAjaxRequester.constructStringToSign\n                (getSignatureAjaxRequester.REQUEST_TYPE.MULTIPART_ABORT, bucket, host, options.getKey(id))\n                .withUploadId(uploadId);\n\n        // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n        getSignatureAjaxRequester.getSignature(id, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n        return promise;\n    }\n\n    /**\n     * Called by the base ajax requester when the response has been received.  We definitively determine here if the\n     * \"Abort MPU\" request has been a success or not.\n     *\n     * @param id ID associated with the file.\n     * @param xhr `XMLHttpRequest` object containing the response, among other things.\n     * @param isError A boolean indicating success or failure according to the base ajax requester (primarily based on status code).\n     */\n    function handleAbortRequestComplete(id, xhr, isError) {\n        var domParser = new DOMParser(),\n            responseDoc = domParser.parseFromString(xhr.responseText, \"application/xml\"),\n            errorEls = responseDoc.getElementsByTagName(\"Error\"),\n            awsErrorMsg;\n\n        options.log(qq.format(\"Abort response status {}, body = {}\", xhr.status, xhr.responseText));\n\n        // If the base requester has determine this a failure, give up.\n        if (isError) {\n            options.log(qq.format(\"Abort Multipart Upload request for {} failed with status {}.\", id, xhr.status), \"error\");\n        }\n        else {\n            // Make sure the correct bucket and key has been specified in the XML response from AWS.\n            if (errorEls.length) {\n                isError = true;\n                awsErrorMsg = responseDoc.getElementsByTagName(\"Message\")[0].textContent;\n                options.log(qq.format(\"Failed to Abort Multipart Upload request for {}.  Error: {}\", id, awsErrorMsg), \"error\");\n            }\n            else {\n                options.log(qq.format(\"Abort MPU request succeeded for file ID {}.\", id));\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [\"DELETE\"],\n        method: options.method,\n        contentType: null,\n        endpointStore: options.endpointStore,\n        maxConnections: options.maxConnections,\n        allowXRequestedWithAndCacheControl: false, //These headers are not necessary & would break some installations if added\n        log: options.log,\n        onComplete: handleAbortRequestComplete,\n        successfulResponseCodes: {\n            DELETE: [204]\n        }\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends the \"Abort\" request.\n         *\n         * @param id ID associated with the file.\n         * @param uploadId AWS uploadId for this file\n         */\n        send: function(id, uploadId) {\n            getHeaders(id, uploadId).then(function(headers, endOfUrl) {\n                options.log(\"Submitting S3 Abort multipart upload request for \" + id);\n                requester.initTransport(id)\n                    .withPath(endOfUrl)\n                    .withHeaders(headers)\n                    .send();\n            });\n        }\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to S3 buckets via the associated AWS API.\n *\n * If chunking is supported and enabled, the S3 Multipart Upload REST API is utilized.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var getName = proxy.getName,\n        log = proxy.log,\n        clockDrift = spec.clockDrift,\n        expectedStatus = 200,\n        onGetBucket = spec.getBucket,\n        onGetHost = spec.getHost,\n        onGetKeyName = spec.getKeyName,\n        filenameParam = spec.filenameParam,\n        paramsStore = spec.paramsStore,\n        endpointStore = spec.endpointStore,\n        aclStore = spec.aclStore,\n        reducedRedundancy = spec.objectProperties.reducedRedundancy,\n        region = spec.objectProperties.region,\n        serverSideEncryption = spec.objectProperties.serverSideEncryption,\n        validation = spec.validation,\n        signature = qq.extend({region: region, drift: clockDrift}, spec.signature),\n        handler = this,\n        credentialsProvider = spec.signature.credentialsProvider,\n\n        chunked = {\n            // Sends a \"Complete Multipart Upload\" request and then signals completion of the upload\n            // when the response to this request has been parsed.\n            combine: function(id) {\n                var uploadId = handler._getPersistableData(id).uploadId,\n                    etagMap = handler._getPersistableData(id).etags,\n                    result = new qq.Promise();\n\n                requesters.completeMultipart.send(id, uploadId, etagMap).then(\n                    result.success,\n\n                    function failure(reason, xhr) {\n                        result.failure(upload.done(id, xhr).response, xhr);\n                    }\n                );\n\n                return result;\n            },\n\n            // The last step in handling a chunked upload.  This is called after each chunk has been sent.\n            // The request may be successful, or not.  If it was successful, we must extract the \"ETag\" element\n            // in the XML response and store that along with the associated part number.\n            // We need these items to \"Complete\" the multipart upload after all chunks have been successfully sent.\n            done: function(id, xhr, chunkIdx) {\n                var response = upload.response.parse(id, xhr),\n                    etag;\n\n                if (response.success) {\n                    etag = xhr.getResponseHeader(\"ETag\");\n\n                    if (!handler._getPersistableData(id).etags) {\n                        handler._getPersistableData(id).etags = [];\n                    }\n                    handler._getPersistableData(id).etags.push({part: chunkIdx + 1, etag: etag});\n                }\n            },\n\n            /**\n             * Determines headers that must be attached to the chunked (Multipart Upload) request.  One of these headers is an\n             * Authorization value, which must be determined by asking the local server to sign the request first.  So, this\n             * function returns a promise.  Once all headers are determined, the `success` method of the promise is called with\n             * the headers object.  If there was some problem determining the headers, we delegate to the caller's `failure`\n             * callback.\n             *\n             * @param id File ID\n             * @param chunkIdx Index of the chunk to PUT\n             * @returns {qq.Promise}\n             */\n            initHeaders: function(id, chunkIdx, blob) {\n                var headers = {},\n                    bucket = upload.bucket.getName(id),\n                    host = upload.host.getName(id),\n                    key = upload.key.urlSafe(id),\n                    promise = new qq.Promise(),\n                    signatureConstructor = requesters.restSignature.constructStringToSign\n                        (requesters.restSignature.REQUEST_TYPE.MULTIPART_UPLOAD, bucket, host, key)\n                        .withPartNum(chunkIdx + 1)\n                        .withContent(blob)\n                        .withUploadId(handler._getPersistableData(id).uploadId);\n\n                // Ask the local server to sign the request.  Use this signature to form the Authorization header.\n                requesters.restSignature.getSignature(id + \".\" + chunkIdx, {signatureConstructor: signatureConstructor}).then(promise.success, promise.failure);\n\n                return promise;\n            },\n\n            put: function(id, chunkIdx) {\n                var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx),\n                    domain = spec.endpointStore.get(id),\n                    promise = new qq.Promise();\n\n                // Add appropriate headers to the multipart upload request.\n                // Once these have been determined (asynchronously) attach the headers and send the chunk.\n                chunked.initHeaders(id, chunkIdx, chunkData.blob).then(function(headers, endOfUrl) {\n                    if (xhr._cancelled) {\n                        log(qq.format(\"Upload of item {}.{} cancelled. Upload will not start after successful signature request.\", id, chunkIdx));\n                        promise.failure({error: \"Chunk upload cancelled\"});\n                    }\n                    else {\n                        var url = domain + \"/\" + endOfUrl;\n                        handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                        upload.track(id, xhr, chunkIdx).then(promise.success, promise.failure);\n                        xhr.open(\"PUT\", url, true);\n\n                        var hasContentType = false;\n                        qq.each(headers, function(name, val) {\n                            if (name === \"Content-Type\") {\n                                hasContentType = true;\n                            }\n\n                            xhr.setRequestHeader(name, val);\n                        });\n\n                        // Workaround for IE Edge\n                        if (!hasContentType) {\n                            xhr.setRequestHeader(\"Content-Type\", \"\");\n                        }\n\n                        xhr.send(chunkData.blob);\n                    }\n                }, function() {\n                    promise.failure({error: \"Problem signing the chunk!\"}, xhr);\n                });\n\n                return promise;\n            },\n\n            send: function(id, chunkIdx) {\n                var promise = new qq.Promise();\n\n                chunked.setup(id).then(\n                    // The \"Initiate\" request succeeded.  We are ready to send the first chunk.\n                    function() {\n                        chunked.put(id, chunkIdx).then(promise.success, promise.failure);\n                    },\n\n                    // We were unable to initiate the chunked upload process.\n                    function(errorMessage, xhr) {\n                        promise.failure({error: errorMessage}, xhr);\n                    }\n                );\n\n                return promise;\n            },\n\n            /**\n             * Sends an \"Initiate Multipart Upload\" request to S3 via the REST API, but only if the MPU has not already been\n             * initiated.\n             *\n             * @param id Associated file ID\n             * @returns {qq.Promise} A promise that is fulfilled when the initiate request has been sent and the response has been parsed.\n             */\n            setup: function(id) {\n                var promise = new qq.Promise(),\n                    uploadId = handler._getPersistableData(id).uploadId,\n                    uploadIdPromise = new qq.Promise();\n\n                if (!uploadId) {\n                    handler._getPersistableData(id).uploadId = uploadIdPromise;\n                    requesters.initiateMultipart.send(id).then(\n                        function(uploadId) {\n                            handler._getPersistableData(id).uploadId = uploadId;\n                            uploadIdPromise.success(uploadId);\n                            promise.success(uploadId);\n                        },\n                        function(errorMsg, xhr) {\n                            handler._getPersistableData(id).uploadId = null;\n                            promise.failure(errorMsg, xhr);\n                            uploadIdPromise.failure(errorMsg, xhr);\n                        }\n                    );\n                }\n                else if (uploadId instanceof qq.Promise) {\n                    uploadId.then(function(uploadId) {\n                        promise.success(uploadId);\n                    });\n                }\n                else {\n                    promise.success(uploadId);\n                }\n\n                return promise;\n            }\n        },\n\n        requesters = {\n            abortMultipart: new qq.s3.AbortMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            completeMultipart: new qq.s3.CompleteMultipartAjaxRequester({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log,\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                }\n            }),\n\n            initiateMultipart: new qq.s3.InitiateMultipartAjaxRequester({\n                filenameParam: filenameParam,\n                endpointStore: endpointStore,\n                paramsStore: paramsStore,\n                signatureSpec: signature,\n                aclStore: aclStore,\n                reducedRedundancy: reducedRedundancy,\n                serverSideEncryption: serverSideEncryption,\n                cors: spec.cors,\n                log: log,\n                getContentType: function(id) {\n                    return handler._getMimeType(id);\n                },\n                getBucket: function(id) {\n                    return upload.bucket.getName(id);\n                },\n                getHost: function(id) {\n                    return upload.host.getName(id);\n                },\n                getKey: function(id) {\n                    return upload.key.urlSafe(id);\n                },\n                getName: function(id) {\n                    return getName(id);\n                }\n            }),\n\n            policySignature: new qq.s3.RequestSigner({\n                expectingPolicy: true,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            }),\n\n            restSignature: new qq.s3.RequestSigner({\n                endpointStore: endpointStore,\n                signatureSpec: signature,\n                cors: spec.cors,\n                log: log\n            })\n        },\n\n        simple = {\n            /**\n             * Used for simple (non-chunked) uploads to determine the parameters to send along with the request.  Part of this\n             * process involves asking the local server to sign the request, so this function returns a promise.  The promise\n             * is fulfilled when all parameters are determined, or when we determine that all parameters cannot be calculated\n             * due to some error.\n             *\n             * @param id File ID\n             * @returns {qq.Promise}\n             */\n            initParams: function(id) {\n                /*jshint -W040 */\n                var customParams = paramsStore.get(id);\n                customParams[filenameParam] = getName(id);\n\n                return qq.s3.util.generateAwsParams({\n                    endpoint: endpointStore.get(id),\n                    clockDrift: clockDrift,\n                    params: customParams,\n                    type: handler._getMimeType(id),\n                    bucket: upload.bucket.getName(id),\n                    key: handler.getThirdPartyFileId(id),\n                    accessKey: credentialsProvider.get().accessKey,\n                    sessionToken: credentialsProvider.get().sessionToken,\n                    acl: aclStore.get(id),\n                    expectedStatus: expectedStatus,\n                    minFileSize: validation.minSizeLimit,\n                    maxFileSize: validation.maxSizeLimit,\n                    reducedRedundancy: reducedRedundancy,\n                    region: region,\n                    serverSideEncryption: serverSideEncryption,\n                    signatureVersion: signature.version,\n                    log: log\n                },\n                qq.bind(requesters.policySignature.getSignature, this, id));\n            },\n\n            send: function(id) {\n                var promise = new qq.Promise(),\n                    xhr = handler._createXhr(id),\n                    fileOrBlob = handler.getFile(id);\n\n                handler._registerProgressHandler(id);\n                upload.track(id, xhr).then(promise.success, promise.failure);\n\n                // Delegate to a function the sets up the XHR request and notifies us when it is ready to be sent, along w/ the payload.\n                simple.setup(id, xhr, fileOrBlob).then(function(toSend) {\n                    log(\"Sending upload request for \" + id);\n                    xhr.send(toSend);\n                }, promise.failure);\n\n                return promise;\n            },\n\n            /**\n             * Starts the upload process by delegating to an async function that determine parameters to be attached to the\n             * request.  If all params can be determined, we are called back with the params and the caller of this function is\n             * informed by invoking the `success` method on the promise returned by this function, passing the payload of the\n             * request.  If some error occurs here, we delegate to a function that signals a failure for this upload attempt.\n             *\n             * Note that this is only used by the simple (non-chunked) upload process.\n             *\n             * @param id File ID\n             * @param xhr XMLHttpRequest to use for the upload\n             * @param fileOrBlob `File` or `Blob` to send\n             * @returns {qq.Promise}\n             */\n            setup: function(id, xhr, fileOrBlob) {\n                var formData = new FormData(),\n                    endpoint = endpointStore.get(id),\n                    url = endpoint,\n                    promise = new qq.Promise();\n\n                simple.initParams(id).then(\n                    // Success - all params determined\n                    function(awsParams) {\n                        xhr.open(\"POST\", url, true);\n\n                        qq.obj2FormData(awsParams, formData);\n\n                        // AWS requires the file field be named \"file\".\n                        formData.append(\"file\", fileOrBlob);\n\n                        promise.success(formData);\n                    },\n\n                    // Failure - we couldn't determine some params (likely the signature)\n                    function(errorMessage) {\n                        promise.failure({error: errorMessage});\n                    }\n                );\n\n                return promise;\n            }\n        },\n\n        upload = {\n            /**\n             * Note that this is called when an upload has reached a termination point,\n             * regardless of success/failure.  For example, it is called when we have\n             * encountered an error during the upload or when the file may have uploaded successfully.\n             *\n             * @param id file ID\n             */\n            bucket: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedBucket = handler._getFileState(id).bucket;\n\n                    if (cachedBucket) {\n                        promise.success(cachedBucket);\n                    }\n                    else {\n                        onGetBucket(id).then(function(bucket) {\n                            handler._getFileState(id).bucket = bucket;\n                            promise.success(bucket);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).bucket;\n                }\n            },\n\n            host: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        cachedHost = handler._getFileState(id).host;\n\n                    if (cachedHost) {\n                        promise.success(cachedHost);\n                    }\n                    else {\n                        onGetHost(id).then(function(host) {\n                            handler._getFileState(id).host = host;\n                            promise.success(host);\n                        }, promise.failure);\n                    }\n\n                    return promise;\n                },\n\n                getName: function(id) {\n                    return handler._getFileState(id).host;\n                }\n            },\n\n            done: function(id, xhr) {\n                var response = upload.response.parse(id, xhr),\n                    isError = response.success !== true;\n\n                if (isError && upload.response.shouldReset(response.code)) {\n                    log(\"This is an unrecoverable error, we must restart the upload entirely on the next retry attempt.\", \"error\");\n                    response.reset = true;\n                }\n\n                return {\n                    success: !isError,\n                    response: response\n                };\n            },\n\n            key: {\n                promise: function(id) {\n                    var promise = new qq.Promise(),\n                        key = handler.getThirdPartyFileId(id);\n\n                    /* jshint eqnull:true */\n                    if (key == null) {\n                        handler._setThirdPartyFileId(id, promise);\n                        onGetKeyName(id, getName(id)).then(\n                            function(keyName) {\n                                handler._setThirdPartyFileId(id, keyName);\n                                promise.success(keyName);\n                            },\n                            function(errorReason) {\n                                handler._setThirdPartyFileId(id, null);\n                                promise.failure(errorReason);\n                            }\n                        );\n                    }\n                    else if (qq.isGenericPromise(key)) {\n                        key.then(promise.success, promise.failure);\n                    }\n                    else {\n                        promise.success(key);\n                    }\n\n                    return promise;\n                },\n\n                urlSafe: function(id) {\n                    var encodedKey = handler.getThirdPartyFileId(id);\n                    return qq.s3.util.uriEscapePath(encodedKey);\n                }\n            },\n\n            response: {\n                parse: function(id, xhr) {\n                    var response = {},\n                        parsedErrorProps;\n\n                    try {\n                        log(qq.format(\"Received response status {} with body: {}\", xhr.status, xhr.responseText));\n\n                        if (xhr.status === expectedStatus) {\n                            response.success = true;\n                        }\n                        else {\n                            parsedErrorProps = upload.response.parseError(xhr.responseText);\n\n                            if (parsedErrorProps) {\n                                response.error = parsedErrorProps.message;\n                                response.code = parsedErrorProps.code;\n                            }\n                        }\n                    }\n                    catch (error) {\n                        log(\"Error when attempting to parse xhr response text (\" + error.message + \")\", \"error\");\n                    }\n\n                    return response;\n                },\n\n                /**\n                 * This parses an XML response by extracting the \"Message\" and \"Code\" elements that accompany AWS error responses.\n                 *\n                 * @param awsResponseXml XML response from AWS\n                 * @returns {object} Object w/ `code` and `message` properties, or undefined if we couldn't find error info in the XML document.\n                 */\n                parseError: function(awsResponseXml) {\n                    var parser = new DOMParser(),\n                        parsedDoc = parser.parseFromString(awsResponseXml, \"application/xml\"),\n                        errorEls = parsedDoc.getElementsByTagName(\"Error\"),\n                        errorDetails = {},\n                        codeEls, messageEls;\n\n                    if (errorEls.length) {\n                        codeEls = parsedDoc.getElementsByTagName(\"Code\");\n                        messageEls = parsedDoc.getElementsByTagName(\"Message\");\n\n                        if (messageEls.length) {\n                            errorDetails.message = messageEls[0].textContent;\n                        }\n\n                        if (codeEls.length) {\n                            errorDetails.code = codeEls[0].textContent;\n                        }\n\n                        return errorDetails;\n                    }\n                },\n\n                // Determine if the upload should be restarted on the next retry attempt\n                // based on the error code returned in the response from AWS.\n                shouldReset: function(errorCode) {\n                    /*jshint -W014 */\n                    return errorCode === \"EntityTooSmall\"\n                        || errorCode === \"InvalidPart\"\n                        || errorCode === \"InvalidPartOrder\"\n                        || errorCode === \"NoSuchUpload\";\n                }\n            },\n\n            start: function(id, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                upload.key.promise(id).then(function() {\n                    upload.bucket.promise(id).then(function() {\n                        upload.host.promise(id).then(function() {\n                            /* jshint eqnull:true */\n                            if (optChunkIdx == null) {\n                                simple.send(id).then(promise.success, promise.failure);\n                            }\n                            else {\n                                chunked.send(id, optChunkIdx).then(promise.success, promise.failure);\n                            }\n                        });\n                    });\n                },\n                function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n\n                return promise;\n            },\n\n            track: function(id, xhr, optChunkIdx) {\n                var promise = new qq.Promise();\n\n                xhr.onreadystatechange = function() {\n                    if (xhr.readyState === 4) {\n                        var result;\n\n                        /* jshint eqnull:true */\n                        if (optChunkIdx == null) {\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                        else {\n                            chunked.done(id, xhr, optChunkIdx);\n                            result = upload.done(id, xhr);\n                            promise[result.success ? \"success\" : \"failure\"](result.response, xhr);\n                        }\n                    }\n                };\n\n                return promise;\n            }\n        };\n\n    qq.extend(this, {\n        uploadChunk: upload.start,\n        uploadFile: upload.start\n    });\n\n    qq.extend(this, new qq.XhrUploadHandler({\n        options: qq.extend({namespace: \"s3\"}, spec),\n        proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n    }));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var uploadId = handler._getPersistableData(id) && handler._getPersistableData(id).uploadId,\n                    existedInLocalStorage = handler._maybeDeletePersistedChunkData(id);\n\n                if (uploadId !== undefined && existedInLocalStorage) {\n                    requesters.abortMultipart.send(id, uploadId);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return chunked.combine(id);\n            },\n\n            _getLocalStorageId: function(id) {\n                var baseStorageId = super_._getLocalStorageId(id),\n                    bucketName = upload.bucket.getName(id);\n\n                return baseStorageId + \"-\" + bucketName;\n            }\n        };\n    });\n};\n","/*globals qq */\n/**\n * Upload handler used by the upload to S3 module that assumes the current user agent does not have any support for the\n * File API, and, therefore, makes use of iframes and forms to submit the files directly to S3 buckets via the associated\n * AWS API.\n *\n * @param options Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\nqq.s3.FormUploadHandler = function(options, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        clockDrift = options.clockDrift,\n        onUuidChanged = proxy.onUuidChanged,\n        getName = proxy.getName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        onGetBucket = options.getBucket,\n        onGetKeyName = options.getKeyName,\n        filenameParam = options.filenameParam,\n        paramsStore = options.paramsStore,\n        endpointStore = options.endpointStore,\n        aclStore = options.aclStore,\n        reducedRedundancy = options.objectProperties.reducedRedundancy,\n        region = options.objectProperties.region,\n        serverSideEncryption = options.objectProperties.serverSideEncryption,\n        validation = options.validation,\n        signature = options.signature,\n        successRedirectUrl = options.iframeSupport.localBlankPagePath,\n        credentialsProvider = options.signature.credentialsProvider,\n        getSignatureAjaxRequester = new qq.s3.RequestSigner({\n            signatureSpec: signature,\n            cors: options.cors,\n            log: log\n        });\n\n    if (successRedirectUrl === undefined) {\n        throw new Error(\"successRedirectEndpoint MUST be defined if you intend to use browsers that do not support the File API!\");\n    }\n\n    /**\n     * Attempt to parse the contents of an iframe after receiving a response from the server.  If the contents cannot be\n     * read (perhaps due to a security error) it is safe to assume that the upload was not successful since Amazon should\n     * have redirected to a known endpoint that should provide a parseable response.\n     *\n     * @param id ID of the associated file\n     * @param iframe target of the form submit\n     * @returns {boolean} true if the contents can be read, false otherwise\n     */\n    function isValidResponse(id, iframe) {\n        var response,\n            endpoint = options.endpointStore.get(id),\n            bucket = handler._getFileState(id).bucket,\n            doc,\n            innerHtml,\n            responseData;\n\n        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n        try {\n            // iframe.contentWindow.document - for IE<7\n            doc = iframe.contentDocument || iframe.contentWindow.document;\n            innerHtml = doc.body.innerHTML;\n\n            responseData = qq.s3.util.parseIframeResponse(iframe);\n            if (responseData.bucket === bucket &&\n                responseData.key === qq.s3.util.encodeQueryStringParam(handler.getThirdPartyFileId(id))) {\n\n                return true;\n            }\n\n            log(\"Response from AWS included an unexpected bucket or key name.\", \"error\");\n\n        }\n        catch (error) {\n            log(\"Error when attempting to parse form upload response (\" + error.message + \")\", \"error\");\n        }\n\n        return false;\n    }\n\n    function generateAwsParams(id) {\n        /*jshint -W040 */\n        var customParams = paramsStore.get(id);\n\n        customParams[filenameParam] = getName(id);\n\n        return qq.s3.util.generateAwsParams({\n            endpoint: endpointStore.get(id),\n            clockDrift: clockDrift,\n            params: customParams,\n            bucket: handler._getFileState(id).bucket,\n            key: handler.getThirdPartyFileId(id),\n            accessKey: credentialsProvider.get().accessKey,\n            sessionToken: credentialsProvider.get().sessionToken,\n            acl: aclStore.get(id),\n            minFileSize: validation.minSizeLimit,\n            maxFileSize: validation.maxSizeLimit,\n            successRedirectUrl: successRedirectUrl,\n            reducedRedundancy: reducedRedundancy,\n            region: region,\n            serverSideEncryption: serverSideEncryption,\n            signatureVersion: signature.version,\n            log: log\n        },\n        qq.bind(getSignatureAjaxRequester.getSignature, this, id));\n    }\n\n    /**\n     * Creates form, that will be submitted to iframe\n     */\n    function createForm(id, iframe) {\n        var promise = new qq.Promise(),\n            method = \"POST\",\n            endpoint = options.endpointStore.get(id),\n            fileName = getName(id);\n\n        generateAwsParams(id).then(function(params) {\n            var form = handler._initFormForUpload({\n                method: method,\n                endpoint: endpoint,\n                params: params,\n                paramsInBody: true,\n                targetName: iframe.name\n            });\n\n            promise.success(form);\n        }, function(errorMessage) {\n            promise.failure(errorMessage);\n            handleFinishedUpload(id, iframe, fileName, {error: errorMessage});\n        });\n\n        return promise;\n    }\n\n    function handleUpload(id) {\n        var iframe = handler._createIframe(id),\n            input = handler.getInput(id),\n            promise = new qq.Promise();\n\n        createForm(id, iframe).then(function(form) {\n            form.appendChild(input);\n\n            // Register a callback when the response comes in from S3\n            handler._attachLoadEvent(iframe, function(response) {\n                log(\"iframe loaded\");\n\n                // If the common response handler has determined success or failure immediately\n                if (response) {\n                    // If there is something fundamentally wrong with the response (such as iframe content is not accessible)\n                    if (response.success === false) {\n                        log(\"Amazon likely rejected the upload request\", \"error\");\n                        promise.failure(response);\n                    }\n                }\n                // The generic response (iframe onload) handler was not able to make a determination regarding the success of the request\n                else {\n                    response = {};\n                    response.success = isValidResponse(id, iframe);\n\n                    // If the more specific response handle detected a problem with the response from S3\n                    if (response.success === false) {\n                        log(\"A success response was received by Amazon, but it was invalid in some way.\", \"error\");\n                        promise.failure(response);\n                    }\n                    else {\n                        qq.extend(response, qq.s3.util.parseIframeResponse(iframe));\n                        promise.success(response);\n                    }\n                }\n\n                handleFinishedUpload(id, iframe);\n            });\n\n            log(\"Sending upload request for \" + id);\n            form.submit();\n            qq(form).remove();\n        }, promise.failure);\n\n        return promise;\n    }\n\n    function handleFinishedUpload(id, iframe) {\n        handler._detachLoadEvent(id);\n        iframe && qq(iframe).remove();\n    }\n\n    qq.extend(this, new qq.FormUploadHandler({\n        options: {\n            isCors: false,\n            inputName: \"file\"\n        },\n\n        proxy: {\n            onCancel: options.onCancel,\n            onUuidChanged: onUuidChanged,\n            getName: getName,\n            getUuid: getUuid,\n            log: log\n        }\n    }));\n\n    qq.extend(this, {\n        uploadFile: function(id) {\n            var name = getName(id),\n                promise = new qq.Promise();\n\n            if (handler.getThirdPartyFileId(id)) {\n                if (handler._getFileState(id).bucket) {\n                    handleUpload(id).then(promise.success, promise.failure);\n                }\n                else {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handleUpload(id).then(promise.success, promise.failure);\n                    });\n                }\n            }\n            else {\n                // The S3 uploader module will either calculate the key or ask the server for it\n                // and will call us back once it is known.\n                onGetKeyName(id, name).then(function(key) {\n                    onGetBucket(id).then(function(bucket) {\n                        handler._getFileState(id).bucket = bucket;\n                        handler._setThirdPartyFileId(id, key);\n                        handleUpload(id).then(promise.success, promise.failure);\n                    }, function(errorReason) {\n                        promise.failure({error: errorReason});\n                    });\n                }, function(errorReason) {\n                    promise.failure({error: errorReason});\n                });\n            }\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\nqq.azure = qq.azure || {};\nqq.azure.util = qq.azure.util || (function() {\n    \"use strict\";\n\n    return {\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\n\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\n         *\n         * @param name Name of the Request Header parameter.\n         * @returns {Boolean} Test result.\n         */\n        _paramNameMatchesAzureParameter: function(name) {\n            switch (name) {\n                case \"Cache-Control\":\n                case \"Content-Disposition\":\n                case \"Content-Encoding\":\n                case \"Content-MD5\":\n                case \"x-ms-blob-content-encoding\":\n                case \"x-ms-blob-content-disposition\":\n                case \"x-ms-blob-content-md5\":\n                case \"x-ms-blob-cache-control\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n\n        /** Create Prefixed request headers which are appropriate for Azure.\n         *\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\n         * passed along without a metadata prefix. For all other request header parameter names,\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\n         *\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\n         * @returns {String} A valid Request Header parameter name.\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                return name;\n            }\n            else {\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\n            }\n        },\n\n        getParamsAsHeaders: function(params) {\n            var headers = {};\n\n            qq.each(params, function(name, val) {\n                var headerName = qq.azure.util._getPrefixedParamName(name),\n                    value = null;\n\n                if (qq.isFunction(val)) {\n                    value = String(val());\n                }\n                else if (qq.isObject(val)) {\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\n                }\n                else {\n                    value = String(val);\n                }\n\n                if (value !== null) {\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                        headers[headerName] = value;\n                    } else {\n                        headers[headerName] = encodeURIComponent(value);\n                    }\n                }\n            });\n\n            return headers;\n        },\n\n        parseAzureError: function(responseText, log) {\n            var domParser = new DOMParser(),\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\n                errorDetails = {},\n                codeTag, messageTag;\n\n            log(\"Received error response: \" + responseText, \"error\");\n\n            if (errorTag) {\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\n                if (messageTag) {\n                    errorDetails.message = messageTag.textContent;\n                }\n\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\n                if (codeTag) {\n                    errorDetails.code = codeTag.textContent;\n                }\n\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\n\n                return errorDetails;\n            }\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploaderBasic = function(o) {\n        if (!qq.supportedFeatures.ajaxUploading) {\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\n        }\n\n        var options = {\n            signature: {\n                endpoint: null,\n\n                customHeaders: {}\n            },\n\n            // 'uuid', 'filename', or a function which may be promissory\n            blobProperties: {\n                name: \"uuid\"\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            chunking: {\n                // If this is increased, Azure may respond with a 413\n                partSize: 4000000,\n                // Don't chunk files less than this size\n                minFileSize: 4000001\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds blob names for file representations constructed from a session request.\n        this._cannedBlobNames = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\n        getBlobName: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedBlobNames[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n            return this._cannedBlobNames[id];\n        },\n\n        _getEndpointSpecificParams: function(id) {\n            return {\n                blob: this.getBlobName(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                container: this._endpointStore.get(id)\n            };\n        },\n\n        _createUploadHandler: function() {\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\n                {\n                    signature: this._options.signature,\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\n                },\n                \"azure\");\n        },\n\n        _determineBlobName: function(id) {\n            var self = this,\n                blobNameOptionValue = this._options.blobProperties.name,\n                uuid = this.getUuid(id),\n                filename = this.getName(id),\n                fileExtension = qq.getExtension(filename),\n                blobNameToUse = uuid;\n\n            if (qq.isString(blobNameOptionValue)) {\n                switch (blobNameOptionValue) {\n                    case \"uuid\":\n                        if (fileExtension !== undefined) {\n                            blobNameToUse += \".\" + fileExtension;\n                        }\n                        return new qq.Promise().success(blobNameToUse);\n                    case \"filename\":\n                        return new qq.Promise().success(filename);\n                    default:\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\n                }\n            }\n            else {\n                return blobNameOptionValue.call(this, id);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.blobName == null) {\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedBlobNames[id] = sessionData.blobName;\n            }\n\n            return id;\n        },\n\n        _deleteBlob: function(relatedToCancel, id) {\n            var self = this,\n                deleteBlobSasUri = {},\n                blobUriStore = {\n                    get: function(id) {\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\n                    }\n                },\n                deleteFileEndpointStore = {\n                    get: function(id) {\n                        return deleteBlobSasUri[id];\n                    }\n                },\n                getSasSuccess = function(id, sasUri) {\n                    deleteBlobSasUri[id] = sasUri;\n                    deleteBlob.send(id);\n                },\n                getSasFailure = function(id, reason, xhr) {\n                    if (relatedToCancel) {\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                    }\n                    else {\n                        self._onDeleteComplete(id, xhr, true);\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\n                    }\n                },\n                deleteBlob = new qq.azure.DeleteBlob({\n                    endpointStore: deleteFileEndpointStore,\n                    log: qq.bind(self.log, self),\n                    onDelete: function(id) {\n                        self._onDelete(id);\n                        self._options.callbacks.onDelete(id);\n                    },\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\n                        delete deleteBlobSasUri[id];\n\n                        if (isError) {\n                            if (relatedToCancel) {\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\n                            }\n                            else {\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\n                            }\n                        }\n\n                        if (relatedToCancel) {\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\n                        }\n                        else {\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                        }\n                    }\n                }),\n                getSas = new qq.azure.GetSas({\n                    cors: this._options.cors,\n                    customHeaders: this._options.signature.customHeaders,\n                    endpointStore: {\n                        get: function() {\n                            return self._options.signature.endpoint;\n                        }\n                    },\n                    restRequestVerb: deleteBlob.method,\n                    log: qq.bind(self.log, self)\n                });\n\n            getSas.request(id, blobUriStore.get(id)).then(\n                qq.bind(getSasSuccess, self, id),\n                qq.bind(getSasFailure, self, id));\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return {\n                sendDelete: function(id, uuid) {\n                    self._deleteBlob(false, id);\n                }\n            };\n        }\n    });\n}());\n","/*globals qq */\n/**\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\n * associated Azure API.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\n// TODO l18n for error messages returned to UI\nqq.azure.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        log = proxy.log,\n        cors = spec.cors,\n        endpointStore = spec.endpointStore,\n        paramsStore = spec.paramsStore,\n        signature = spec.signature,\n        filenameParam = spec.filenameParam,\n        minFileSizeForChunking = spec.chunking.minFileSize,\n        deleteBlob = spec.deleteBlob,\n        onGetBlobName = spec.onGetBlobName,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n\n        getBlobMetadata = function(id) {\n            var params = paramsStore.get(id);\n            params[filenameParam] = getName(id);\n            return params;\n        },\n\n        api = {\n            putBlob: new qq.azure.PutBlob({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            putBlock: new qq.azure.PutBlock({\n                log: log\n            }),\n\n            putBlockList: new qq.azure.PutBlockList({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\n                cors: cors,\n                customHeaders: signature.customHeaders,\n                endpointStore: {\n                    get: function() {\n                        return signature.endpoint;\n                    }\n                },\n                log: log,\n                restRequestVerb: \"PUT\"\n            })\n        };\n\n    function combineChunks(id) {\n        var promise = new qq.Promise();\n\n        getSignedUrl(id).then(function(sasUri) {\n            var mimeType = handler._getMimeType(id),\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\n\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\n                handler._registerXhr(id, null, xhr, api.putBlockList);\n            })\n                .then(function(xhr) {\n                    log(\"Success combining chunks for id \" + id);\n                    promise.success({}, xhr);\n                }, function(xhr) {\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\n                    handleFailure(xhr, promise);\n                });\n\n        },\n        promise.failure);\n\n        return promise;\n    }\n\n    function determineBlobUrl(id) {\n        var containerUrl = endpointStore.get(id),\n            promise = new qq.Promise(),\n            getBlobNameSuccess = function(blobName) {\n                handler._setThirdPartyFileId(id, blobName);\n                promise.success(containerUrl + \"/\" + blobName);\n            },\n            getBlobNameFailure = function(reason) {\n                promise.failure(reason);\n            };\n\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\n\n        return promise;\n    }\n\n    function getSignedUrl(id, optChunkIdx) {\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\n\n            promise = new qq.Promise(),\n            getSasSuccess = function(sasUri) {\n                log(\"GET SAS request succeeded.\");\n                promise.success(sasUri);\n            },\n            getSasFailure = function(reason, getSasXhr) {\n                log(\"GET SAS request failed: \" + reason, \"error\");\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\n            },\n            determineBlobUrlSuccess = function(blobUrl) {\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\n                    getSasSuccess,\n                    getSasFailure\n                );\n            },\n            determineBlobUrlFailure = function(reason) {\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\n                promise.failure({error: reason});\n            };\n\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\n\n        return promise;\n    }\n\n    function handleFailure(xhr, promise) {\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\n            errorMsg = \"Problem sending file to Azure\";\n\n        promise.failure({error: errorMsg,\n            azureError: azureError && azureError.message,\n            reset: xhr.status === 403\n        });\n    }\n\n    qq.extend(this, {\n        uploadChunk: function(id, chunkIdx) {\n            var promise = new qq.Promise();\n\n            getSignedUrl(id, chunkIdx).then(\n                function(sasUri) {\n                    var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx);\n\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\n\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\n                        function(blockIdEntry) {\n                            if (!handler._getPersistableData(id).blockIdEntries) {\n                                handler._getPersistableData(id).blockIdEntries = [];\n                            }\n\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\n                            log(\"Put Block call succeeded for \" + id);\n                            promise.success({}, xhr);\n                        },\n                        function() {\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\n                            handleFailure(xhr, promise);\n                        }\n                    );\n                },\n                promise.failure\n            );\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var promise = new qq.Promise(),\n                fileOrBlob = handler.getFile(id);\n\n            getSignedUrl(id).then(function(sasUri) {\n                var xhr = handler._createXhr(id);\n\n                handler._registerProgressHandler(id);\n\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\n                    function() {\n                        log(\"Put Blob call succeeded for \" + id);\n                        promise.success({}, xhr);\n                    },\n                    function() {\n                        log(\"Put Blob call failed for \" + id, \"error\");\n                        handleFailure(xhr, promise);\n                    }\n                );\n            },\n            promise.failure);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this,\n        new qq.XhrUploadHandler({\n            options: qq.extend({namespace: \"azure\"}, spec),\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n        }\n    ));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var relatedToCancel = handler._wasCanceled(id),\n                    chunkingData = handler._getPersistableData(id),\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\n\n                if (relatedToCancel && blockIdEntries.length > 0) {\n                    deleteBlob(id);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return combineChunks(id);\n            },\n\n            _shouldChunkThisFile: function(id) {\n                var maybePossible = super_._shouldChunkThisFile(id);\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\n            }\n        };\n    });\n};\n","/* globals qq */\n/**\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\n * make a specific request on a Blob via the Azure REST API.\n */\nqq.azure.GetSas = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            customHeaders: {},\n            restRequestVerb: \"PUT\",\n            endpointStore: null,\n            log: function(str, level) {}\n        },\n        requestPromises = {};\n\n    qq.extend(options, o);\n\n    function sasResponseReceived(id, xhr, isError) {\n        var promise = requestPromises[id];\n\n        if (isError) {\n            promise.failure(\"Received response code \" + xhr.status, xhr);\n        }\n        else {\n            if (xhr.responseText.length) {\n                promise.success(xhr.responseText);\n            }\n            else {\n                promise.failure(\"Empty response.\", xhr);\n            }\n        }\n\n        delete requestPromises[id];\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        successfulResponseCodes: {\n            GET: [200]\n        },\n        contentType: null,\n        customHeaders: options.customHeaders,\n        endpointStore: options.endpointStore,\n        cors: options.cors,\n        log: options.log,\n        onComplete: sasResponseReceived\n    }));\n\n    qq.extend(this, {\n        request: function(id, blobUri) {\n            var requestPromise = new qq.Promise(),\n                restVerb = options.restRequestVerb;\n\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\n\n            requestPromises[id] = requestPromise;\n\n            requester.initTransport(id)\n                .withParams({\n                    bloburi: blobUri,\n                    _method: restVerb\n                })\n                .withCacheBuster()\n                .send();\n\n            return requestPromise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\n */\nqq.azure.DeleteBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"DELETE\",\n        options = {\n            endpointStore: {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhr, isError) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [202];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: options.endpointStore,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete\n    }));\n\n    qq.extend(this, {\n        method: method,\n        send: function(id) {\n            options.log(\"Submitting Delete Blob request for \" + id);\n\n            return requester.initTransport(id)\n                .send();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\n */\nqq.azure.PutBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id),\n                headers = qq.azure.util.getParamsAsHeaders(params);\n\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\n\n            return headers;\n        },\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success();\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, url, file) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting Put Blob request for \" + id);\n\n            promises[id] = promise;\n            endpoints[id] = url;\n\n            requester.initTransport(id)\n                .withPayload(file)\n                .withHeaders({\"Content-Type\": file.type})\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\n */\nqq.azure.PutBlock = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        blockIdEntries = {},\n        promises = {},\n        options = {\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id],\n                blockIdEntry = blockIdEntries[id];\n\n            delete endpoints[id];\n            delete promises[id];\n            delete blockIdEntries[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success(blockIdEntry);\n            }\n        }\n    }));\n\n    function createBlockId(partNum) {\n        var digits = 5,\n            zeros = new Array(digits + 1).join(\"0\"),\n            paddedPartNum = (zeros + partNum).slice(-digits);\n\n        return btoa(paddedPartNum);\n    }\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, sasUri, partNum, blob) {\n            var promise = new qq.Promise(),\n                blockId = createBlockId(partNum);\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\n\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\n            blockIdEntries[id] = {part: partNum, id: blockId};\n\n            requester.initTransport(id)\n                .withPayload(blob)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\n */\nqq.azure.PutBlockList = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        promises = {},\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id);\n\n            return qq.azure.util.getParamsAsHeaders(params);\n        },\n        contentType: \"text/plain\",\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: function() {},\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n\n        }\n    }));\n\n    function createRequestBody(blockIdEntries) {\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\n\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\n        blockIdEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\n            var latestEl = doc.createElement(\"Latest\"),\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\n\n            latestEl.appendChild(latestTextEl);\n            qq(doc).children()[0].appendChild(latestEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    qq.extend(this, {\n        method: method,\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\n            var promise = new qq.Promise(),\n                blockIdsXml = createRequestBody(blockIdEntries),\n                xhr;\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\n\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\n\n            xhr = requester.initTransport(id)\n                .withPayload(blockIdsXml)\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\n                .send();\n            registerXhrCallback(xhr);\n\n            return promise;\n        }\n    });\n};\n"]}